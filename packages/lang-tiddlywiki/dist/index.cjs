'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var lr = require('@lezer/lr');
var language = require('@codemirror/language');
var highlight = require('@lezer/highlight');

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = lr.LRParser.deserialize({
  version: 14,
  states: "nQQOPOOOOOO'#Cc'#CcOOOO'#Ca'#CaQQOPOOOOOO-E6_-E6_",
  stateData: "]~OQPORPOSPO~O",
  goto: "cWPPPPPXP_QRORSRTQOR",
  nodeNames: "âš  Program FooBar Foo Bar",
  maxTerm: 7,
  skippedNodes: [0],
  repeatNodeCount: 1,
  tokenData: "!a~RQ#U#VX#Y#Zj~[P#T#U_~bP#f#ge~jOS~~mP#c#dp~sP#c#dv~{PR~#U#V!O~!RP#T#U!U~!XP#f#g![~!aOQ~",
  tokenizers: [0],
  topRules: {"Program":[0,1]},
  tokenPrec: 0
});

const tiddlywikiLanguage = language.LRLanguage.define({
    parser: parser.configure({
        props: [
            language.indentNodeProp.add({
                Application: language.delimitedIndent({ closing: ')', align: false })
            }),
            language.foldNodeProp.add({
                Application: language.foldInside
            }),
            highlight.styleTags({
                'FooBar/Bar': highlight.tags.lineComment,
                Bar: highlight.tags.lineComment,
                Identifier: highlight.tags.variableName,
                Boolean: highlight.tags.bool,
                String: highlight.tags.string,
                LineComment: highlight.tags.lineComment,
                '( )': highlight.tags.paren
            })
        ]
    }),
    languageData: {
        // TODO
        commentTokens: {
            // line: '<!-- -->',
            block: {
                open: '<!--',
                close: '-->'
            }
        }
    }
});
function tiddlywiki() {
    return new language.LanguageSupport(tiddlywikiLanguage);
}

exports.tiddlywiki = tiddlywiki;
exports.tiddlywikiLanguage = tiddlywikiLanguage;
