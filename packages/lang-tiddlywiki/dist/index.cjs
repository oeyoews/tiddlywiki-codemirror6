'use strict';

var lr = require('@lezer/lr');
var common = require('@lezer/common');
var language = require('@codemirror/language');
var highlight = require('@lezer/highlight');

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = lr.LRParser.deserialize({
  version: 14,
  states: "nQVQPOOOOQO'#Cn'#CnOOQO'#Cj'#CjQVQPOOOOQO-E6h-E6h",
  stateData: "}~OaOS~OQPORPOSPOTPOUPOVPOWPOXPOYPOZPO[PO]PO~O",
  goto: "ncPPPPPPPPPPPPPPdPPPjQRORSRTQOR",
  nodeNames: "âš  Program Identifier Heading1 Heading2 Delete Bold UnderLine Italic Link List Blockquote LineComment Definition",
  maxTerm: 18,
  skippedNodes: [0],
  repeatNodeCount: 1,
  tokenData: "0j~R_XY!QYZ!Q]^!Qpq!Qqr!cst#rwx#}!P!Q%n!]!^'_!^!_'v!`!a*`!b!c*k!}#O,[#R#S-Y#r#s.y~!VSa~XY!QYZ!Q]^!Qpq!Q~!fQpq!lqr#T~!qSR~OY!lZ;'S!l;'S;=`!}<%lO!l~#QP;=`<%l!l~#WPpq#Z~#`SS~OY#ZZ;'S#Z;'S;=`#l<%lO#Z~#oP;=`<%l#Z~#uPpq#x~#}OY~~$QPwx$T~$WUOY$TZw$Twx$jx;'S$T;'S;=`%h<%lO$T~$mUOY$TZw$Twx%Px;'S$T;'S;=`%h<%lO$T~%UUU~OY$TZw$Twx%Px;'S$T;'S;=`%h<%lO$T~%kP;=`<%l$T~%qP!P!Q%t~%wUOY%tZ!P%t!P!Q&Z!Q;'S%t;'S;=`'X<%lO%t~&^UOY%tZ!P%t!P!Q&p!Q;'S%t;'S;=`'X<%lO%t~&uUW~OY%tZ!P%t!P!Q&p!Q;'S%t;'S;=`'X<%lO%t~'[P;=`<%l%t~'dS]~OY'_Z;'S'_;'S;=`'p<%lO'_~'sP;=`<%l'_~'yPqr'|~(PP}!O(S~(VP}!O(Y~(]UOY(YZ}(Y}!O(o!O;'S(Y;'S;=`*Y<%lO(Y~(rUOY(YZ}(Y}!O)U!O;'S(Y;'S;=`*Y<%lO(Y~)XWOY(YZ}(Y}!O)U!O!`(Y!`!a)q!a;'S(Y;'S;=`*Y<%lO(Y~)vU[~OY(YZ}(Y}!O(o!O;'S(Y;'S;=`*Y<%lO(Y~*]P;=`<%l(Y~*cPpq*f~*kOZ~~*nP!b!c*q~*tUOY*qZ!b*q!b!c+W!c;'S*q;'S;=`,U<%lO*q~+ZUOY*qZ!b*q!b!c+m!c;'S*q;'S;=`,U<%lO*q~+rUQ~OY*qZ!b*q!b!c+m!c;'S*q;'S;=`,U<%lO*q~,XP;=`<%l*q~,_P!}#O,b~,eSOY,qZ;'S,q;'S;=`-S<%lO,q~,tP#P#Q,w~,zP#P#Q,}~-SOX~~-VP;=`<%l,q~-]P#R#S-`~-cUOY-`Z#R-`#R#S-u#S;'S-`;'S;=`.s<%lO-`~-xUOY-`Z#R-`#R#S.[#S;'S-`;'S;=`.s<%lO-`~.aUV~OY-`Z#R-`#R#S.[#S;'S-`;'S;=`.s<%lO-`~.vP;=`<%l-`~.|P#r#s/P~/SUOY/PZ#r/P#r#s/f#s;'S/P;'S;=`0d<%lO/P~/iUOY/PZ#r/P#r#s/{#s;'S/P;'S;=`0d<%lO/P~0QUT~OY/PZ#r/P#r#s/{#s;'S/P;'S;=`0d<%lO/P~0gP;=`<%l/P",
  tokenizers: [0],
  topRules: {"Program":[0,1]},
  tokenPrec: 0
});

const headingProp = new common.NodeProp();
const tiddlywikiLanguage = language.LRLanguage.define({
    parser: parser.configure({
        props: [
            language.indentNodeProp.add({
                Application: language.delimitedIndent({ closing: ')', align: false })
            }),
            language.foldNodeProp.add({
                Application: language.foldInside
            }),
            headingProp.add(isHeading),
            highlight.styleTags({
                Heading1: highlight.tags.heading1,
                Heading2: highlight.tags.heading2,
                Delete: highlight.tags.strikethrough,
                Bold: highlight.tags.strong,
                Underline: highlight.tags.strong,
                Identifier: highlight.tags.strong,
                Italic: highlight.tags.emphasis,
                Link: highlight.tags.link,
                List: highlight.tags.number,
                Blockquote: highlight.tags.quote,
                LineComment: highlight.tags.blockComment,
                Definition: highlight.tags.strong
            })
        ]
    }),
    languageData: {
        commentTokens: {
            block: {
                open: '<!--',
                close: '-->'
            }
        }
    }
});
// export const tiddlywikiCompletion = tiddlywikiLanguage.data.of({
// autocomplete: completeFromList([
//   { label: 'tiddlywiki', type: 'keyword' },
//   { label: 'define', type: 'keyword' },
//   { label: 'let', type: 'keyword' }
// ])
// });
function tiddlywiki() {
    return new language.LanguageSupport(tiddlywikiLanguage, []);
}
function isHeading(type) {
    let match = /^(?:ATX|Setext)Heading(\d)$/.exec(type.name);
    return match ? +match[1] : undefined;
}

exports.tiddlywiki = tiddlywiki;
exports.tiddlywikiLanguage = tiddlywikiLanguage;
