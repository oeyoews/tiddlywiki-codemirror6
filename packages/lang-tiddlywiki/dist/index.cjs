'use strict';

var lr = require('@lezer/lr');
var common = require('@lezer/common');
var language = require('@codemirror/language');
var highlight = require('@lezer/highlight');

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = lr.LRParser.deserialize({
  version: 14,
  states: "!dQYQPOOOOQO'#Ci'#CiOeQPO'#CiOOQO'#Ce'#CeQYQPOOOjQPO'#CdOOQO,59T,59TOOQO-E6c-E6cOOQO,59O,59OOxQPO,59OOOQO1G.j1G.j",
  stateData: "!W~O[OSPOS~ORPOSPOTQO~OVTO~ORPOSPOTQOUWO~ORPOSPOTQOUYO~O",
  goto: "r^PPPPPPPP_bPPPlRUQQSOSVSXRXTXROSTX",
  nodeNames: "âš  LineComment Program Identifier String Heading ) ( Application",
  maxTerm: 13,
  nodeProps: [
    ["openedBy", 6,"("],
    ["closedBy", 7,")"]
  ],
  skippedNodes: [0,1],
  repeatNodeCount: 1,
  tokenData: "%`~R^XY}YZ}]^}pq}qr!`rs!kxy$Xyz$^}!O$c!Q![$c!]!^$w!c!}$c#R#S$c#T#o$c~!SS[~XY}YZ}]^}pq}~!cPqr!f~!kOT~~!nVOr!krs#Ts#O!k#O#P#Y#P;'S!k;'S;=`$R<%lO!k~#YOS~~#]RO;'S!k;'S;=`#f;=`O!k~#iWOr!krs#Ts#O!k#O#P#Y#P;'S!k;'S;=`$R;=`<%l!k<%lO!k~$UP;=`<%l!k~$^OV~~$cOU~~$hTR~}!O$c!Q![$c!c!}$c#R#S$c#T#o$c~$|SP~OY$wZ;'S$w;'S;=`%Y<%lO$w~%]P;=`<%l$w",
  tokenizers: [0],
  topRules: {"Program":[0,2]},
  tokenPrec: 0
});

const headingProp = new common.NodeProp();
const tiddlywikiLanguage = language.LRLanguage.define({
    parser: parser.configure({
        props: [
            language.indentNodeProp.add({
                Application: language.delimitedIndent({ closing: ')', align: false })
            }),
            language.foldNodeProp.add({
                Application: language.foldInside
            }),
            headingProp.add(isHeading),
            highlight.styleTags({
                // Identifier: t.variableName,
                Heading: highlight.tags.heading,
                // BlockComment: t.blockComment,
                // Boolean: t.bool,
                Keyword: highlight.tags.keyword,
                String: highlight.tags.string,
                // LineComment: t.lineComment,
                '( )': highlight.tags.paren
            })
        ]
    }),
    languageData: {
        commentTokens: {
            block: {
                open: '<!--',
                close: '-->'
            }
        }
    }
});
function tiddlywiki() {
    return new language.LanguageSupport(tiddlywikiLanguage);
}
function isHeading(type) {
    let match = /^(?:ATX|Setext)Heading(\d)$/.exec(type.name);
    return match ? +match[1] : undefined;
}

exports.tiddlywiki = tiddlywiki;
exports.tiddlywikiLanguage = tiddlywikiLanguage;
