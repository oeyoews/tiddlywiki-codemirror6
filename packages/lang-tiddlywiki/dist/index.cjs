'use strict';

var lr = require('@lezer/lr');
var common = require('@lezer/common');
var language = require('@codemirror/language');
var highlight = require('@lezer/highlight');

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = lr.LRParser.deserialize({
  version: 14,
  states: "!dQVQPOOOOQO'#Ci'#CiOeQPO'#CiOOQO'#Ce'#CeQVQPOOOjQPO'#CdOOQO,59T,59TOOQO-E6c-E6cOOQO,59O,59OO{QPO,59OOOQO1G.j1G.j",
  stateData: "!^~O[OS~OQPORPOSPOTQO~OVTO~OQPORPOSPOTQOUWO~OQPORPOSPOTQOUYO~O",
  goto: "r^PPPPPPPP_bPPPlRUQQSOSVSXRXTXROSTX",
  nodeNames: "âš  Program Heading1 Heading2 List Blockquote ) ( Application",
  maxTerm: 13,
  nodeProps: [
    ["openedBy", 6,"("],
    ["closedBy", 7,")"]
  ],
  skippedNodes: [0],
  repeatNodeCount: 1,
  tokenData: "!r~RXXYnYZn]^npqnqr!Pst!^xy!cyz!h!`!a!m~sS[~XYnYZn]^npqn~!UPQ~qr!X~!^OR~~!cOS~~!hOV~~!mOU~~!rOT~",
  tokenizers: [0],
  topRules: {"Program":[0,1]},
  tokenPrec: 0
});

const headingProp = new common.NodeProp();
const tiddlywikiLanguage = language.LRLanguage.define({
    parser: parser.configure({
        props: [
            language.indentNodeProp.add({
                Application: language.delimitedIndent({ closing: ')', align: false })
            }),
            language.foldNodeProp.add({
                Application: language.foldInside
            }),
            headingProp.add(isHeading),
            highlight.styleTags({
                List: highlight.tags.number,
                Heading1: highlight.tags.heading1,
                Heading2: highlight.tags.heading2,
                Blockquote: highlight.tags.quote,
                // BlockComment: t.blockComment,
                '( )': highlight.tags.paren
            })
        ]
    }),
    languageData: {
        commentTokens: {
            block: {
                open: '<!--',
                close: '-->'
            }
        }
    }
});
// export const tiddlywikiCompletion = tiddlywikiLanguage.data.of({
// autocomplete: completeFromList([
//   { label: 'tiddlywiki', type: 'keyword' },
//   { label: 'define', type: 'keyword' },
//   { label: 'let', type: 'keyword' }
// ])
// });
function tiddlywiki() {
    return new language.LanguageSupport(tiddlywikiLanguage, []);
}
function isHeading(type) {
    let match = /^(?:ATX|Setext)Heading(\d)$/.exec(type.name);
    return match ? +match[1] : undefined;
}

exports.tiddlywiki = tiddlywiki;
exports.tiddlywikiLanguage = tiddlywikiLanguage;
