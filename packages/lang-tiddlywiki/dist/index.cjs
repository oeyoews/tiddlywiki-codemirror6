'use strict';

var lr = require('@lezer/lr');
var language = require('@codemirror/language');
var highlight = require('@lezer/highlight');

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = lr.LRParser.deserialize({
  version: 14,
  states: "!dQYQPOOOhQPO'#CdOOQO'#Cj'#CjOyQQO'#CjOOQO'#Cf'#CfQYQPOOOOQO,59O,59OO!OQPO,59OOOQO,59U,59UOOQO-E6d-E6dOOQO1G.j1G.j",
  stateData: "!a~O]OSPOS~ORQOSQOTQOVPO~ORQOSQOTQOUUOVPO~OXWO~ORQOSQOTQOUYOVPO~O",
  goto: "v_PPPPPPPP`PfPPPpXROPTVQTOQVPTXTVXSOPTV",
  nodeNames: "âš  LineComment Program Identifier String Boolean ) ( Application Keyword",
  maxTerm: 14,
  nodeProps: [
    ["openedBy", 6,"("],
    ["closedBy", 7,")"]
  ],
  skippedNodes: [0,1],
  repeatNodeCount: 1,
  tokenData: "'V~R`XY!TYZ!T]^!Tpq!Trs!fst$Sxy$byz$g}!O$l!Q![$l!]!^%Q!c!}$l#R#S$l#T#b$l#b#c%i#c#o$l~!YS]~XY!TYZ!T]^!Tpq!T~!iVOr!frs#Os#O!f#O#P#T#P;'S!f;'S;=`#|<%lO!f~#TOS~~#WRO;'S!f;'S;=`#a;=`O!f~#dWOr!frs#Os#O!f#O#P#T#P;'S!f;'S;=`#|;=`<%l!f<%lO!f~$PP;=`<%l!f~$VQ#Y#Z$]#h#i$]~$bOT~~$gOV~~$lOU~P$qTRP}!O$l!Q![$l!c!}$l#R#S$l#T#o$l~%VSP~OY%QZ;'S%Q;'S;=`%c<%lO%Q~%fP;=`<%l%QR%nVRP}!O$l!Q![$l!c!}$l#R#S$l#T#c$l#c#d&T#d#o$lR&YVRP}!O$l!Q![$l!c!}$l#R#S$l#T#k$l#k#l&o#l#o$lR&vTRPXQ}!O$l!Q![$l!c!}$l#R#S$l#T#o$l",
  tokenizers: [0, 1],
  topRules: {"Program":[0,2]},
  tokenPrec: 0
});

const tiddlywikiLanguage = language.LRLanguage.define({
    parser: parser.configure({
        props: [
            language.indentNodeProp.add({
                Application: language.delimitedIndent({ closing: ')', align: false })
            }),
            language.foldNodeProp.add({
                Application: language.foldInside
            }),
            highlight.styleTags({
                Identifier: highlight.tags.variableName,
                Boolean: highlight.tags.bool,
                Keyword: highlight.tags.keyword,
                String: highlight.tags.string,
                LineComment: highlight.tags.lineComment,
                '( )': highlight.tags.paren
            })
        ]
    }),
    languageData: {
        commentTokens: {
            block: {
                open: '<!--',
                close: '-->'
            }
        }
    }
});
function tiddlywiki() {
    return new language.LanguageSupport(tiddlywikiLanguage);
}

exports.tiddlywiki = tiddlywiki;
exports.tiddlywikiLanguage = tiddlywikiLanguage;
