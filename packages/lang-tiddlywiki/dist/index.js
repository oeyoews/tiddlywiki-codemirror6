import { LRParser } from '@lezer/lr';
import { NodeProp } from '@lezer/common';
import { LRLanguage, indentNodeProp, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';
import { styleTags, tags } from '@lezer/highlight';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = LRParser.deserialize({
  version: 14,
  states: "nQVQPOOOOQO'#Cp'#CpOOQO'#Cl'#ClQVQPOOOOQO-E6j-E6j",
  stateData: "!T~OcOS~OQPORPOSPOTPOUPOVPOWPOXPOYPOZPO[PO]PO^PO_PO~O",
  goto: "pePPPPPPPPPPPPPPPPfPPPlQRORSRTQOR",
  nodeNames: "âš  Program Identifier Heading1 Heading2 Delete Bold UnderLine Italic Link List Blockquote LineComment Definition Keyword Macro",
  maxTerm: 20,
  skippedNodes: [0],
  repeatNodeCount: 1,
  tokenData: ":m~R`XY!TYZ!T]^!Tpq!Tqr!fst#uwx$Q!P!Q%q!]!^'b!^!_'y!`!a3m!b!c3x!}#O5i#R#S6g#Y#Z8W#r#s8|~!YSc~XY!TYZ!T]^!Tpq!T~!iQpq!oqr#W~!tSR~OY!oZ;'S!o;'S;=`#Q<%lO!o~#TP;=`<%l!o~#ZPpq#^~#cSS~OY#^Z;'S#^;'S;=`#o<%lO#^~#rP;=`<%l#^~#xPpq#{~$QOY~~$TPwx$W~$ZUOY$WZw$Wwx$mx;'S$W;'S;=`%k<%lO$W~$pUOY$WZw$Wwx%Sx;'S$W;'S;=`%k<%lO$W~%XUU~OY$WZw$Wwx%Sx;'S$W;'S;=`%k<%lO$W~%nP;=`<%l$W~%tP!P!Q%w~%zUOY%wZ!P%w!P!Q&^!Q;'S%w;'S;=`'[<%lO%w~&aUOY%wZ!P%w!P!Q&s!Q;'S%w;'S;=`'[<%lO%w~&xUW~OY%wZ!P%w!P!Q&s!Q;'S%w;'S;=`'[<%lO%w~'_P;=`<%l%w~'gS]~OY'bZ;'S'b;'S;=`'s<%lO'b~'vP;=`<%l'b~'|Tqr(]tu*ouv/o!P!Q1Z!^!_2x~(`P}!O(c~(fP}!O(i~(lUOY(iZ}(i}!O)O!O;'S(i;'S;=`*i<%lO(i~)RUOY(iZ}(i}!O)e!O;'S(i;'S;=`*i<%lO(i~)hWOY(iZ}(i}!O)e!O!`(i!`!a*Q!a;'S(i;'S;=`*i<%lO(i~*VU[~OY(iZ}(i}!O)O!O;'S(i;'S;=`*i<%lO(i~*lP;=`<%l(i~*rTpq+R#`#a,Y#g#h.m#h#i/P#j#k/]~+UP#X#Y+X~+[P#`#a+_~+bP#g#h+e~+hP#X#Y+k~+nP#]#^+q~+tP#Y#Z+w~+zPpq+}~,QP!`!a,T~,YO^~~,]P#]#^,`~,cQ#b#c,i#g#h,o~,lP#_#`+}~,rP#h#i,u~,xQpq,T}!O-O~-RQ#X#Y-X#h#i-q~-[P#a#b-_~-bP#d#e-e~-hP#h#i-k~-nP#m#n+}~-tP#X#Y-w~-zP#a#b-}~.QP#d#e.T~.WP#`#a.Z~.^P#T#U.a~.dP#h#i.g~.jP#X#Y+}~.pP#X#Y.s~.vP#h#i.y~.|Ppq,T~/SP#X#Y/V~/YP#l#m.s~/`P#T#U/c~/fP#f#g/i~/lP#g#h.y~/rPpq/u~/xQ#X#Y0O#]#^1T~0RQ#`#a0X#b#c0q~0[P#g#h0_~0bP#X#Y0e~0hPpq0k~0nPuv+}~0tP#W#X0w~0zP#]#^0}~1QP#Y#Z0e~1WP#Y#Z.y~1^Ptu1a~1dR#`#a1m#g#h2Y#j#k2f~1pP#]#^1s~1vP#g#h1y~1|P#h#i2P~2SQ}!O-O!`!a,T~2]P#X#Y2`~2cP#h#i+}~2iP#T#U2l~2oP#f#g2r~2uP#g#h+}~2{P#b#c3O~3RP#c#d3U~3XP#k#l3[~3_P!`!a3b~3eP!`!a3h~3mO_~~3pPpq3s~3xOZ~~3{P!b!c4O~4RUOY4OZ!b4O!b!c4e!c;'S4O;'S;=`5c<%lO4O~4hUOY4OZ!b4O!b!c4z!c;'S4O;'S;=`5c<%lO4O~5PUQ~OY4OZ!b4O!b!c4z!c;'S4O;'S;=`5c<%lO4O~5fP;=`<%l4O~5lP!}#O5o~5rSOY6OZ;'S6O;'S;=`6a<%lO6O~6RP#P#Q6U~6XP#P#Q6[~6aOX~~6dP;=`<%l6O~6jP#R#S6m~6pUOY6mZ#R6m#R#S7S#S;'S6m;'S;=`8Q<%lO6m~7VUOY6mZ#R6m#R#S7i#S;'S6m;'S;=`8Q<%lO6m~7nUV~OY6mZ#R6m#R#S7i#S;'S6m;'S;=`8Q<%lO6m~8TP;=`<%l6m~8ZP#]#^8^~8aP#`#a8d~8gP#h#i8j~8mP#X#Y8p~8sP#f#g8v~8yP!_!`,T~9PP#r#s9S~9VUOY9SZ#r9S#r#s9i#s;'S9S;'S;=`:g<%lO9S~9lUOY9SZ#r9S#r#s:O#s;'S9S;'S;=`:g<%lO9S~:TUT~OY9SZ#r9S#r#s:O#s;'S9S;'S;=`:g<%lO9S~:jP;=`<%l9S",
  tokenizers: [0],
  topRules: {"Program":[0,1]},
  tokenPrec: 0
});

const headingProp = new NodeProp();
const tiddlywikiLanguage = LRLanguage.define({
    parser: parser.configure({
        props: [
            indentNodeProp.add({
                Application: delimitedIndent({ closing: ')', align: false })
            }),
            foldNodeProp.add({
                Application: foldInside
            }),
            headingProp.add(isHeading),
            styleTags({
                Macro: tags.variableName,
                Keyword: tags.keyword,
                Heading1: tags.heading1,
                Heading2: tags.heading2,
                Delete: tags.strikethrough,
                Bold: tags.strong,
                Underline: tags.strong,
                Identifier: tags.strong,
                Italic: tags.emphasis,
                Link: tags.link,
                // TODO use list
                List: tags.number,
                Blockquote: tags.quote,
                LineComment: tags.blockComment,
                Definition: tags.strong
            })
        ]
    }),
    languageData: {
        commentTokens: {
            block: {
                open: '<!--',
                close: '-->'
            }
        }
    }
});
// export const tiddlywikiCompletion = tiddlywikiLanguage.data.of({
// autocomplete: completeFromList([
//   { label: 'tiddlywiki', type: 'keyword' },
//   { label: 'define', type: 'keyword' },
//   { label: 'let', type: 'keyword' }
// ])
// });
function tiddlywiki() {
    return new LanguageSupport(tiddlywikiLanguage, []);
}
function isHeading(type) {
    let match = /^(?:ATX|Setext)Heading(\d)$/.exec(type.name);
    return match ? +match[1] : undefined;
}

export { tiddlywiki, tiddlywikiLanguage };
