import { LRParser } from '@lezer/lr';
import { LRLanguage, indentNodeProp, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';
import { styleTags, tags } from '@lezer/highlight';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = LRParser.deserialize({
  version: 14,
  states: "nQQOPOOOOOO'#Cc'#CcOOOO'#Ca'#CaQQOPOOOOOO-E6_-E6_",
  stateData: "]~OQPORPOSPO~O",
  goto: "cWPPPPPXP_QRORSRTQOR",
  nodeNames: "âš  Program FooBar Foo Bar",
  maxTerm: 7,
  skippedNodes: [0],
  repeatNodeCount: 1,
  tokenData: "!a~RQ#U#VX#Y#Zj~[P#T#U_~bP#f#ge~jOS~~mP#c#dp~sP#c#dv~{PR~#U#V!O~!RP#T#U!U~!XP#f#g![~!aOQ~",
  tokenizers: [0],
  topRules: {"Program":[0,1]},
  tokenPrec: 0
});

const tiddlywikiLanguage = LRLanguage.define({
    parser: parser.configure({
        props: [
            indentNodeProp.add({
                Application: delimitedIndent({ closing: ')', align: false })
            }),
            foldNodeProp.add({
                Application: foldInside
            }),
            styleTags({
                'FooBar/Bar': tags.lineComment,
                Bar: tags.lineComment,
                Identifier: tags.variableName,
                Boolean: tags.bool,
                String: tags.string,
                LineComment: tags.lineComment,
                '( )': tags.paren
            })
        ]
    }),
    languageData: {
        commentTokens: {
            block: {
                open: '<!--',
                close: '-->'
            }
        }
    }
});
function tiddlywiki() {
    return new LanguageSupport(tiddlywikiLanguage);
}

export { tiddlywiki, tiddlywikiLanguage };
