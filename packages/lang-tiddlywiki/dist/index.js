import { LRParser } from '@lezer/lr';
import { NodeProp } from '@lezer/common';
import { LRLanguage, indentNodeProp, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';
import { styleTags, tags } from '@lezer/highlight';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = LRParser.deserialize({
  version: 14,
  states: "nQVQPOOOOQO'#Ch'#ChOOQO'#Cd'#CdQVQPOOOOQO-E6b-E6b",
  stateData: "k~OZOS~OQPORPOSPOTPOUPOVPO~O",
  goto: "h]PPPPPPPP^PPPdQRORSRTQOR",
  nodeNames: "âš  Program Heading1 Heading2 List LineComment Definition Blockquote",
  maxTerm: 12,
  skippedNodes: [0],
  repeatNodeCount: 1,
  tokenData: "&X~RXXYnYZn]^npqnqr!Pst!|!]!^#R!^!_#j!`!a&S~sSZ~XYnYZn]^npqn~!SQpq!Yqr!_~!_OQ~~!bPpq!e~!jSR~OY!eZ;'S!e;'S;=`!v<%lO!e~!yP;=`<%l!e~#ROS~~#WSU~OY#RZ;'S#R;'S;=`#d<%lO#R~#gP;=`<%l#R~#mPqr#p~#sP}!O#v~#yP}!O#|~$PUOY#|Z}#|}!O$c!O;'S#|;'S;=`%|<%lO#|~$fUOY#|Z}#|}!O$x!O;'S#|;'S;=`%|<%lO#|~${WOY#|Z}#|}!O$x!O!`#|!`!a%e!a;'S#|;'S;=`%|<%lO#|~%jUT~OY#|Z}#|}!O$c!O;'S#|;'S;=`%|<%lO#|~&PP;=`<%l#|~&XOV~",
  tokenizers: [0],
  topRules: {"Program":[0,1]},
  tokenPrec: 0
});

const headingProp = new NodeProp();
const tiddlywikiLanguage = LRLanguage.define({
    parser: parser.configure({
        props: [
            indentNodeProp.add({
                Application: delimitedIndent({ closing: ')', align: false })
            }),
            foldNodeProp.add({
                Application: foldInside
            }),
            headingProp.add(isHeading),
            styleTags({
                List: tags.number,
                Heading1: tags.heading1,
                Heading2: tags.heading2,
                Blockquote: tags.quote,
                LineComment: tags.comment,
                Definition: tags.strong,
                // BlockComment: t.blockComment,
                '( )': tags.paren
            })
        ]
    }),
    languageData: {
        commentTokens: {
            block: {
                open: '<!--',
                close: '-->'
            }
        }
    }
});
// export const tiddlywikiCompletion = tiddlywikiLanguage.data.of({
// autocomplete: completeFromList([
//   { label: 'tiddlywiki', type: 'keyword' },
//   { label: 'define', type: 'keyword' },
//   { label: 'let', type: 'keyword' }
// ])
// });
function tiddlywiki() {
    return new LanguageSupport(tiddlywikiLanguage, []);
}
function isHeading(type) {
    let match = /^(?:ATX|Setext)Heading(\d)$/.exec(type.name);
    return match ? +match[1] : undefined;
}

export { tiddlywiki, tiddlywikiLanguage };
