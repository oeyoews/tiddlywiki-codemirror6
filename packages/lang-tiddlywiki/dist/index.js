import { LRParser } from '@lezer/lr';
import { NodeProp } from '@lezer/common';
import { LRLanguage, indentNodeProp, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';
import { styleTags, tags } from '@lezer/highlight';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = LRParser.deserialize({
  version: 14,
  states: "nQVQPOOOOQO'#Cp'#CpOOQO'#Cl'#ClQVQPOOOOQO-E6j-E6j",
  stateData: "!T~OcOS~OQPORPOSPOTPOUPOVPOWPOXPOYPOZPO[PO]PO^PO_PO~O",
  goto: "pePPPPPPPPPPPPPPPPfPPPlQRORSRTQOR",
  nodeNames: "âš  Program Identifier Heading1 Heading2 Delete Bold UnderLine Italic Link List Blockquote LineComment Definition Keyword Macro",
  maxTerm: 20,
  skippedNodes: [0],
  repeatNodeCount: 1,
  tokenData: "5r~R`XY!TYZ!T]^!Tpq!Tqr!fst#uwx$Q!P!Q%q!]!^'b!^!_'y!`!a.r!b!c.}!}#O0n#R#S1l#Y#Z3]#r#s4R~!YSc~XY!TYZ!T]^!Tpq!T~!iQpq!oqr#W~!tSR~OY!oZ;'S!o;'S;=`#Q<%lO!o~#TP;=`<%l!o~#ZPpq#^~#cSS~OY#^Z;'S#^;'S;=`#o<%lO#^~#rP;=`<%l#^~#xPpq#{~$QOY~~$TPwx$W~$ZUOY$WZw$Wwx$mx;'S$W;'S;=`%k<%lO$W~$pUOY$WZw$Wwx%Sx;'S$W;'S;=`%k<%lO$W~%XUU~OY$WZw$Wwx%Sx;'S$W;'S;=`%k<%lO$W~%nP;=`<%l$W~%tP!P!Q%w~%zUOY%wZ!P%w!P!Q&^!Q;'S%w;'S;=`'[<%lO%w~&aUOY%wZ!P%w!P!Q&s!Q;'S%w;'S;=`'[<%lO%w~&xUW~OY%wZ!P%w!P!Q&s!Q;'S%w;'S;=`'[<%lO%w~'_P;=`<%l%w~'gS]~OY'bZ;'S'b;'S;=`'s<%lO'b~'vP;=`<%l'b~'|Sqr(Ytu*l!P!Q,o!^!_-}~(]P}!O(`~(cP}!O(f~(iUOY(fZ}(f}!O({!O;'S(f;'S;=`*f<%lO(f~)OUOY(fZ}(f}!O)b!O;'S(f;'S;=`*f<%lO(f~)eWOY(fZ}(f}!O)b!O!`(f!`!a)}!a;'S(f;'S;=`*f<%lO(f~*SU[~OY(fZ}(f}!O({!O;'S(f;'S;=`*f<%lO(f~*iP;=`<%l(f~*oS#`#a*{#g#h+y#h#i,P#j#k,]~+OP#]#^+R~+UQ#b#c+[#g#h+m~+_P#_#`+b~+eP!`!a+h~+mO^~~+pP#h#i+s~+vPpq+h~+|P#X#Y+m~,SP#X#Y,V~,YP#l#m+m~,`P#T#U,c~,fP#f#g,i~,lP#g#h+s~,rPtu,u~,xR#`#a-R#g#h-e#j#k-k~-UP#]#^-X~-[P#g#h-_~-bP#h#i+b~-hP#X#Y-_~-nP#T#U-q~-tP#f#g-w~-zP#g#h+b~.QP#b#c.T~.WP#c#d.Z~.^P#k#l.a~.dP!`!a.g~.jP!`!a.m~.rO_~~.uPpq.x~.}OZ~~/QP!b!c/T~/WUOY/TZ!b/T!b!c/j!c;'S/T;'S;=`0h<%lO/T~/mUOY/TZ!b/T!b!c0P!c;'S/T;'S;=`0h<%lO/T~0UUQ~OY/TZ!b/T!b!c0P!c;'S/T;'S;=`0h<%lO/T~0kP;=`<%l/T~0qP!}#O0t~0wSOY1TZ;'S1T;'S;=`1f<%lO1T~1WP#P#Q1Z~1^P#P#Q1a~1fOX~~1iP;=`<%l1T~1oP#R#S1r~1uUOY1rZ#R1r#R#S2X#S;'S1r;'S;=`3V<%lO1r~2[UOY1rZ#R1r#R#S2n#S;'S1r;'S;=`3V<%lO1r~2sUV~OY1rZ#R1r#R#S2n#S;'S1r;'S;=`3V<%lO1r~3YP;=`<%l1r~3`P#]#^3c~3fP#`#a3i~3lP#h#i3o~3rP#X#Y3u~3xP#f#g3{~4OP!_!`+h~4UP#r#s4X~4[UOY4XZ#r4X#r#s4n#s;'S4X;'S;=`5l<%lO4X~4qUOY4XZ#r4X#r#s5T#s;'S4X;'S;=`5l<%lO4X~5YUT~OY4XZ#r4X#r#s5T#s;'S4X;'S;=`5l<%lO4X~5oP;=`<%l4X",
  tokenizers: [0],
  topRules: {"Program":[0,1]},
  tokenPrec: 0
});

const headingProp = new NodeProp();
const tiddlywikiLanguage = LRLanguage.define({
    parser: parser.configure({
        props: [
            indentNodeProp.add({
                Application: delimitedIndent({ closing: ')', align: false })
            }),
            foldNodeProp.add({
                Application: foldInside
            }),
            headingProp.add(isHeading),
            styleTags({
                Macro: tags.variableName,
                Keyword: tags.keyword,
                Heading1: tags.heading1,
                Heading2: tags.heading2,
                Delete: tags.strikethrough,
                Bold: tags.strong,
                Underline: tags.strong,
                Identifier: tags.strong,
                Italic: tags.emphasis,
                Link: tags.link,
                // TODO use list
                List: tags.number,
                Blockquote: tags.quote,
                LineComment: tags.blockComment,
                Definition: tags.strong
            })
        ]
    }),
    languageData: {
        commentTokens: {
            block: {
                open: '<!--',
                close: '-->'
            }
        }
    }
});
// export const tiddlywikiCompletion = tiddlywikiLanguage.data.of({
// autocomplete: completeFromList([
//   { label: 'tiddlywiki', type: 'keyword' },
//   { label: 'define', type: 'keyword' },
//   { label: 'let', type: 'keyword' }
// ])
// });
function tiddlywiki() {
    return new LanguageSupport(tiddlywikiLanguage, []);
}
function isHeading(type) {
    let match = /^(?:ATX|Setext)Heading(\d)$/.exec(type.name);
    return match ? +match[1] : undefined;
}

export { tiddlywiki, tiddlywikiLanguage };
