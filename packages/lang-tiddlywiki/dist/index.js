import { LRParser } from '@lezer/lr';
import { NodeProp } from '@lezer/common';
import { LRLanguage, indentNodeProp, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';
import { styleTags, tags } from '@lezer/highlight';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = LRParser.deserialize({
  version: 14,
  states: "nQVQPOOOOQO'#Cm'#CmOOQO'#Ci'#CiQVQPOOOOQO-E6g-E6g",
  stateData: "z~O`OS~OQPORPOSPOTPOUPOVPOWPOXPOYPOZPO[PO~O",
  goto: "mbPPPPPPPPPPPPPcPPPiQRORSRTQOR",
  nodeNames: "âš  Program Heading1 Heading2 Delete Bold UnderLine Italic Link List Blockquote LineComment Definition",
  maxTerm: 17,
  skippedNodes: [0],
  repeatNodeCount: 1,
  tokenData: ".v~R^XY}YZ}]^}pq}qr!`st#owx#z!P!Q%k!]!^'[!^!_'s!`!a*]!}#O*h#R#S+f#r#s-V~!SS`~XY}YZ}]^}pq}~!cQpq!iqr#Q~!nSQ~OY!iZ;'S!i;'S;=`!z<%lO!i~!}P;=`<%l!i~#TPpq#W~#]SR~OY#WZ;'S#W;'S;=`#i<%lO#W~#lP;=`<%l#W~#rPpq#u~#zOX~~#}Pwx$Q~$TUOY$QZw$Qwx$gx;'S$Q;'S;=`%e<%lO$Q~$jUOY$QZw$Qwx$|x;'S$Q;'S;=`%e<%lO$Q~%RUT~OY$QZw$Qwx$|x;'S$Q;'S;=`%e<%lO$Q~%hP;=`<%l$Q~%nP!P!Q%q~%tUOY%qZ!P%q!P!Q&W!Q;'S%q;'S;=`'U<%lO%q~&ZUOY%qZ!P%q!P!Q&m!Q;'S%q;'S;=`'U<%lO%q~&rUV~OY%qZ!P%q!P!Q&m!Q;'S%q;'S;=`'U<%lO%q~'XP;=`<%l%q~'aS[~OY'[Z;'S'[;'S;=`'m<%lO'[~'pP;=`<%l'[~'vPqr'y~'|P}!O(P~(SP}!O(V~(YUOY(VZ}(V}!O(l!O;'S(V;'S;=`*V<%lO(V~(oUOY(VZ}(V}!O)R!O;'S(V;'S;=`*V<%lO(V~)UWOY(VZ}(V}!O)R!O!`(V!`!a)n!a;'S(V;'S;=`*V<%lO(V~)sUZ~OY(VZ}(V}!O(l!O;'S(V;'S;=`*V<%lO(V~*YP;=`<%l(V~*`Ppq*c~*hOY~~*kP!}#O*n~*qSOY*}Z;'S*};'S;=`+`<%lO*}~+QP#P#Q+T~+WP#P#Q+Z~+`OW~~+cP;=`<%l*}~+iP#R#S+l~+oUOY+lZ#R+l#R#S,R#S;'S+l;'S;=`-P<%lO+l~,UUOY+lZ#R+l#R#S,h#S;'S+l;'S;=`-P<%lO+l~,mUU~OY+lZ#R+l#R#S,h#S;'S+l;'S;=`-P<%lO+l~-SP;=`<%l+l~-YP#r#s-]~-`UOY-]Z#r-]#r#s-r#s;'S-];'S;=`.p<%lO-]~-uUOY-]Z#r-]#r#s.X#s;'S-];'S;=`.p<%lO-]~.^US~OY-]Z#r-]#r#s.X#s;'S-];'S;=`.p<%lO-]~.sP;=`<%l-]",
  tokenizers: [0],
  topRules: {"Program":[0,1]},
  tokenPrec: 0
});

const headingProp = new NodeProp();
const tiddlywikiLanguage = LRLanguage.define({
    parser: parser.configure({
        props: [
            indentNodeProp.add({
                Application: delimitedIndent({ closing: ')', align: false })
            }),
            foldNodeProp.add({
                Application: foldInside
            }),
            headingProp.add(isHeading),
            styleTags({
                Heading1: tags.heading1,
                Heading2: tags.heading2,
                Delete: tags.strikethrough,
                Bold: tags.strong,
                Underline: tags.strong,
                Italic: tags.emphasis,
                Link: tags.link,
                List: tags.number,
                Blockquote: tags.quote,
                LineComment: tags.blockComment,
                Definition: tags.strong
            })
        ]
    }),
    languageData: {
        commentTokens: {
            block: {
                open: '<!--',
                close: '-->'
            }
        }
    }
});
// export const tiddlywikiCompletion = tiddlywikiLanguage.data.of({
// autocomplete: completeFromList([
//   { label: 'tiddlywiki', type: 'keyword' },
//   { label: 'define', type: 'keyword' },
//   { label: 'let', type: 'keyword' }
// ])
// });
function tiddlywiki() {
    return new LanguageSupport(tiddlywikiLanguage, []);
}
function isHeading(type) {
    let match = /^(?:ATX|Setext)Heading(\d)$/.exec(type.name);
    return match ? +match[1] : undefined;
}

export { tiddlywiki, tiddlywikiLanguage };
