import { LRParser } from '@lezer/lr';
import { NodeProp } from '@lezer/common';
import { LRLanguage, indentNodeProp, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';
import { styleTags, tags } from '@lezer/highlight';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = LRParser.deserialize({
  version: 14,
  states: "!dQYQPOOOOQO'#Ck'#CkOkQPO'#CkOOQO'#Cg'#CgQYQPOOOpQPO'#CfOOQO,59V,59VOOQO-E6e-E6eOOQO,59Q,59QOwQPO,59QOOQO1G.l1G.l",
  stateData: "!O~O^OSPOS~ORPOSPOTPOUPOVQO~OXTO~OWWO~PYOWYO~PYO",
  goto: "t`PPPPPPPPPPadPPPnRUQQSOSVSXRXTXROSTX",
  nodeNames: "âš  LineComment Program Identifier String Heading1 Heading2 List ) ( Application",
  maxTerm: 15,
  nodeProps: [
    ["openedBy", 8,"("],
    ["closedBy", 9,")"]
  ],
  skippedNodes: [0,1],
  repeatNodeCount: 1,
  tokenData: "%j~R_XY!QYZ!Q]^!Qpq!Qqr!crs!pst$^xy$cyz$h}!O$m!Q![$m!]!^%R!c!}$m#R#S$m#T#o$m~!VS^~XY!QYZ!Q]^!Qpq!Q~!hPT~qr!k~!pOU~~!sVOr!prs#Ys#O!p#O#P#_#P;'S!p;'S;=`$W<%lO!p~#_OS~~#bRO;'S!p;'S;=`#k;=`O!p~#nWOr!prs#Ys#O!p#O#P#_#P;'S!p;'S;=`$W;=`<%l!p<%lO!p~$ZP;=`<%l!p~$cOV~~$hOX~~$mOW~~$rTR~}!O$m!Q![$m!c!}$m#R#S$m#T#o$m~%WSP~OY%RZ;'S%R;'S;=`%d<%lO%R~%gP;=`<%l%R",
  tokenizers: [0],
  topRules: {"Program":[0,2]},
  tokenPrec: 0
});

const headingProp = new NodeProp();
const tiddlywikiLanguage = LRLanguage.define({
    parser: parser.configure({
        props: [
            indentNodeProp.add({
                Application: delimitedIndent({ closing: ')', align: false })
            }),
            foldNodeProp.add({
                Application: foldInside
            }),
            headingProp.add(isHeading),
            styleTags({
                // Identifier: t.variableName,
                Heading1: tags.heading1,
                Heading2: tags.heading2,
                List: tags.list,
                BlockComment: tags.blockComment,
                // Boolean: t.bool,
                Keyword: tags.keyword,
                String: tags.string,
                // LineComment: t.lineComment,
                '( )': tags.paren
            })
        ]
    }),
    languageData: {
        commentTokens: {
            block: {
                open: '<!--',
                close: '-->'
            }
        }
    }
});
const tiddlywikiCompletion = tiddlywikiLanguage.data.of({
// autocomplete: completeFromList([
//   { label: 'tiddlywiki', type: 'keyword' },
//   { label: 'define', type: 'keyword' },
//   { label: 'let', type: 'keyword' }
// ])
});
function tiddlywiki() {
    return new LanguageSupport(tiddlywikiLanguage, [tiddlywikiCompletion]);
}
function isHeading(type) {
    let match = /^(?:ATX|Setext)Heading(\d)$/.exec(type.name);
    return match ? +match[1] : undefined;
}

export { tiddlywiki, tiddlywikiCompletion, tiddlywikiLanguage };
