import { LRParser } from '@lezer/lr';
import { NodeProp } from '@lezer/common';
import { LRLanguage, indentNodeProp, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';
import { styleTags, tags } from '@lezer/highlight';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = LRParser.deserialize({
  version: 14,
  states: "nQVQPOOOOQO'#Cp'#CpOOQO'#Cl'#ClQVQPOOOOQO-E6j-E6j",
  stateData: "!T~OcOS~OQPORPOSPOTPOUPOVPOWPOXPOYPOZPO[PO]PO^PO_PO~O",
  goto: "pePPPPPPPPPPPPPPPPfPPPlQRORSRTQOR",
  nodeNames: "âš  Program Identifier Heading1 Heading2 Delete Bold UnderLine Italic Link List Blockquote LineComment Definition Keyword Macro",
  maxTerm: 20,
  skippedNodes: [0],
  repeatNodeCount: 1,
  tokenData: "?d~R`XY!TYZ!T]^!Tpq!Tqr!fst#uwx$Q!P!Q%q!]!^'b!^!_'y!`!a8d!b!c8o!}#O:`#R#S;^#Y#Z<}#r#s=s~!YSc~XY!TYZ!T]^!Tpq!T~!iQpq!oqr#W~!tSR~OY!oZ;'S!o;'S;=`#Q<%lO!o~#TP;=`<%l!o~#ZPpq#^~#cSS~OY#^Z;'S#^;'S;=`#o<%lO#^~#rP;=`<%l#^~#xPpq#{~$QOY~~$TPwx$W~$ZUOY$WZw$Wwx$mx;'S$W;'S;=`%k<%lO$W~$pUOY$WZw$Wwx%Sx;'S$W;'S;=`%k<%lO$W~%XUU~OY$WZw$Wwx%Sx;'S$W;'S;=`%k<%lO$W~%nP;=`<%l$W~%tP!P!Q%w~%zUOY%wZ!P%w!P!Q&^!Q;'S%w;'S;=`'[<%lO%w~&aUOY%wZ!P%w!P!Q&s!Q;'S%w;'S;=`'[<%lO%w~&xUW~OY%wZ!P%w!P!Q&s!Q;'S%w;'S;=`'[<%lO%w~'_P;=`<%l%w~'gS]~OY'bZ;'S'b;'S;=`'s<%lO'b~'vP;=`<%l'b~'|Tqr(]tu*ouv.p!P!Q6Q!^!_7o~(`P}!O(c~(fP}!O(i~(lUOY(iZ}(i}!O)O!O;'S(i;'S;=`*i<%lO(i~)RUOY(iZ}(i}!O)e!O;'S(i;'S;=`*i<%lO(i~)hWOY(iZ}(i}!O)e!O!`(i!`!a*Q!a;'S(i;'S;=`*i<%lO(i~*VU[~OY(iZ}(i}!O)O!O;'S(i;'S;=`*i<%lO(i~*lP;=`<%l(i~*rS#`#a+O#g#h-n#h#i.Q#j#k.^~+RP#]#^+U~+XQ#b#c+_#g#h+p~+bP#_#`+e~+hP!`!a+k~+pO^~~+sP#h#i+v~+yQpq+k}!O,P~,SQ#X#Y,Y#h#i,r~,]P#a#b,`~,cP#d#e,f~,iP#h#i,l~,oP#m#n+e~,uP#X#Y,x~,{P#a#b-O~-RP#d#e-U~-XP#`#a-[~-_P#T#U-b~-eP#h#i-h~-kP#X#Y+e~-qP#X#Y-t~-wP#h#i-z~-}Ppq+k~.TP#X#Y.W~.ZP#l#m-t~.aP#T#U.d~.gP#f#g.j~.mP#g#h-z~.sPpq.v~.yWOY/cZu/cuv/xv#X/c#X#Y1S#Y;'S/c;'S;=`0|<%lO/c~/fUOY/cZu/cuv/xv;'S/c;'S;=`0|<%lO/c~/{WOY/cZu/cuv/xv!`/c!`!a0e!a;'S/c;'S;=`0|<%lO/c~0jU^~OY/cZu/cuv/xv;'S/c;'S;=`0|<%lO/c~1PP;=`<%l/c~1VYOY/cZu/cuv/xv#`/c#`#a1u#a#b/c#b#c4x#c;'S/c;'S;=`0|<%lO/c~1xWOY/cZu/cuv/xv#g/c#g#h2b#h;'S/c;'S;=`0|<%lO/c~2eWOY/cZu/cuv/xv#X/c#X#Y2}#Y;'S/c;'S;=`0|<%lO/c~3QYOY/cZp/cpq/cqu/cuv/xv#]/c#]#^3p#^;'S/c;'S;=`0|<%lO/c~3sWOY/cZu/cuv/xv#Y/c#Y#Z4]#Z;'S/c;'S;=`0|<%lO/c~4`WOY/cZp/cpq/cqu/cuv/xv;'S/c;'S;=`0|<%lO/c~4{WOY/cZu/cuv/xv#W/c#W#X5e#X;'S/c;'S;=`0|<%lO/c~5hWOY/cZu/cuv/xv#]/c#]#^3p#^;'S/c;'S;=`0|<%lO/c~6TPtu6W~6ZR#`#a6d#g#h7P#j#k7]~6gP#]#^6j~6mP#g#h6p~6sP#h#i6v~6yQ}!O,P!`!a+k~7SP#X#Y7V~7YP#h#i+e~7`P#T#U7c~7fP#f#g7i~7lP#g#h+e~7rP#b#c7u~7xP#c#d7{~8OP#k#l8R~8UP!`!a8X~8[P!`!a8_~8dO_~~8gPpq8j~8oOZ~~8rP!b!c8u~8xUOY8uZ!b8u!b!c9[!c;'S8u;'S;=`:Y<%lO8u~9_UOY8uZ!b8u!b!c9q!c;'S8u;'S;=`:Y<%lO8u~9vUQ~OY8uZ!b8u!b!c9q!c;'S8u;'S;=`:Y<%lO8u~:]P;=`<%l8u~:cP!}#O:f~:iSOY:uZ;'S:u;'S;=`;W<%lO:u~:xP#P#Q:{~;OP#P#Q;R~;WOX~~;ZP;=`<%l:u~;aP#R#S;d~;gUOY;dZ#R;d#R#S;y#S;'S;d;'S;=`<w<%lO;d~;|UOY;dZ#R;d#R#S<`#S;'S;d;'S;=`<w<%lO;d~<eUV~OY;dZ#R;d#R#S<`#S;'S;d;'S;=`<w<%lO;d~<zP;=`<%l;d~=QP#]#^=T~=WP#`#a=Z~=^P#h#i=a~=dP#X#Y=g~=jP#f#g=m~=pP!_!`+k~=vP#r#s=y~=|UOY=yZ#r=y#r#s>`#s;'S=y;'S;=`?^<%lO=y~>cUOY=yZ#r=y#r#s>u#s;'S=y;'S;=`?^<%lO=y~>zUT~OY=yZ#r=y#r#s>u#s;'S=y;'S;=`?^<%lO=y~?aP;=`<%l=y",
  tokenizers: [0],
  topRules: {"Program":[0,1]},
  tokenPrec: 0
});

const headingProp = new NodeProp();
const tiddlywikiLanguage = LRLanguage.define({
    parser: parser.configure({
        props: [
            indentNodeProp.add({
                Application: delimitedIndent({ closing: ')', align: false })
            }),
            foldNodeProp.add({
                Application: foldInside
            }),
            headingProp.add(isHeading),
            styleTags({
                Macro: tags.variableName,
                Keyword: tags.keyword,
                Heading1: tags.heading1,
                Heading2: tags.heading2,
                Delete: tags.strikethrough,
                Bold: tags.strong,
                Underline: tags.strong,
                Identifier: tags.strong,
                Italic: tags.emphasis,
                Link: tags.link,
                // TODO use list
                List: tags.number,
                Blockquote: tags.quote,
                LineComment: tags.blockComment,
                Definition: tags.strong
            })
        ]
    }),
    languageData: {
        commentTokens: {
            block: {
                open: '<!--',
                close: '-->'
            }
        }
    }
});
// export const tiddlywikiCompletion = tiddlywikiLanguage.data.of({
// autocomplete: completeFromList([
//   { label: 'tiddlywiki', type: 'keyword' },
//   { label: 'define', type: 'keyword' },
//   { label: 'let', type: 'keyword' }
// ])
// });
function tiddlywiki() {
    return new LanguageSupport(tiddlywikiLanguage, []);
}
function isHeading(type) {
    let match = /^(?:ATX|Setext)Heading(\d)$/.exec(type.name);
    return match ? +match[1] : undefined;
}

export { tiddlywiki, tiddlywikiLanguage };
