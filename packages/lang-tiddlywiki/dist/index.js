import { LRParser } from '@lezer/lr';
import { NodeProp } from '@lezer/common';
import { LRLanguage, indentNodeProp, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';
import { styleTags, tags } from '@lezer/highlight';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = LRParser.deserialize({
  version: 14,
  states: "nQVQPOOOOQO'#Cp'#CpOOQO'#Cl'#ClQVQPOOOOQO-E6j-E6j",
  stateData: "!T~OcOS~OQPORPOSPOTPOUPOVPOWPOXPOYPOZPO[PO]PO^PO_PO~O",
  goto: "pePPPPPPPPPPPPPPPPfPPPlQRORSRTQOR",
  nodeNames: "âš  Program Identifier Heading Delete Bold UnderLine Italic Link List Blockquote LineComment Definition Keyword Image Macro",
  maxTerm: 20,
  skippedNodes: [0],
  repeatNodeCount: 1,
  tokenData: "Dn~R`XY!TYZ!T]^!Tpq!Tqr!fst#swx$k!P!Q&[!]!^'{!^!_(d!`!a;k!b!c<c!}#O>S#R#S@h#Y#ZBX#r#sB}~!YSc~XY!TYZ!T]^!Tpq!T~!iZX^#[pq#[qr!f#y#z#[$f$g#[#BY#BZ#[$IS$I_#[$I|$JO#[$JT$JU#[$KV$KW#[&FU&FV#[~#aSR~OY#[Z;'S#[;'S;=`#m<%lO#[~#pP;=`<%l#[~#vYX^$fpq$f#y#z$f$f$g$f#BY#BZ$f$IS$I_$f$I|$JO$f$JT$JU$f$KV$KW$f&FU&FV$f~$kOX~~$nPwx$q~$tUOY$qZw$qwx%Wx;'S$q;'S;=`&U<%lO$q~%ZUOY$qZw$qwx%mx;'S$q;'S;=`&U<%lO$q~%rUT~OY$qZw$qwx%mx;'S$q;'S;=`&U<%lO$q~&XP;=`<%l$q~&_P!P!Q&b~&eUOY&bZ!P&b!P!Q&w!Q;'S&b;'S;=`'u<%lO&b~&zUOY&bZ!P&b!P!Q'^!Q;'S&b;'S;=`'u<%lO&b~'cUV~OY&bZ!P&b!P!Q'^!Q;'S&b;'S;=`'u<%lO&b~'xP;=`<%l&b~(QS[~OY'{Z;'S'{;'S;=`(^<%lO'{~(aP;=`<%l'{~(gTqr(vtu+Yuv/Z!P!Q9X!^!_:v~(yP}!O(|~)PP}!O)S~)VUOY)SZ})S}!O)i!O;'S)S;'S;=`+S<%lO)S~)lUOY)SZ})S}!O*O!O;'S)S;'S;=`+S<%lO)S~*RWOY)SZ})S}!O*O!O!`)S!`!a*k!a;'S)S;'S;=`+S<%lO)S~*pUZ~OY)SZ})S}!O)i!O;'S)S;'S;=`+S<%lO)S~+VP;=`<%l)S~+]S#`#a+i#g#h.X#h#i.k#j#k.w~+lP#]#^+o~+rQ#b#c+x#g#h,Z~+{P#_#`,O~,RP!`!a,U~,ZO]~~,^P#h#i,a~,dQpq,U}!O,j~,mQ#X#Y,s#h#i-]~,vP#a#b,y~,|P#d#e-P~-SP#h#i-V~-YP#m#n,O~-`P#X#Y-c~-fP#a#b-i~-lP#d#e-o~-rP#`#a-u~-xP#T#U-{~.OP#h#i.R~.UP#X#Y,O~.[P#X#Y._~.bP#h#i.e~.hPpq,U~.nP#X#Y.q~.tP#l#m._~.zP#T#U.}~/QP#f#g/T~/WP#g#h.e~/^Ppq/a~/dWOY/|Zu/|uv0cv#X/|#X#Y1m#Y;'S/|;'S;=`1g<%lO/|~0PUOY/|Zu/|uv0cv;'S/|;'S;=`1g<%lO/|~0fWOY/|Zu/|uv0cv!`/|!`!a1O!a;'S/|;'S;=`1g<%lO/|~1TU]~OY/|Zu/|uv0cv;'S/|;'S;=`1g<%lO/|~1jP;=`<%l/|~1pYOY/|Zu/|uv0cv#`/|#`#a2`#a#b/|#b#c8P#c;'S/|;'S;=`1g<%lO/|~2cWOY/|Zu/|uv0cv#g/|#g#h2{#h;'S/|;'S;=`1g<%lO/|~3OWOY/|Zu/|uv0cv#X/|#X#Y3h#Y;'S/|;'S;=`1g<%lO/|~3kmOX/|XY/|YZ5fZ^/|^p/|pq/|qu/|uv0cv#]/|#]#^5l#^#y/|#y#z/|#z$f/|$f$g/|$g#BY/|#BY#BZ/|#BZ$IS/|$IS$I_/|$I_$I|/|$I|$JO/|$JO$JT/|$JT$JU/|$JU$KV/|$KV$KW/|$KW&FU/|&FU&FV/|&FV;'S/|;'S;=`1g<%lO/|~5iPuv,O~5oWOY/|Zu/|uv0cv#Y/|#Y#Z6X#Z;'S/|;'S;=`1g<%lO/|~6[kOX/|XY/|YZ5fZ^/|^p/|pq/|qu/|uv0cv#y/|#y#z/|#z$f/|$f$g/|$g#BY/|#BY#BZ/|#BZ$IS/|$IS$I_/|$I_$I|/|$I|$JO/|$JO$JT/|$JT$JU/|$JU$KV/|$KV$KW/|$KW&FU/|&FU&FV/|&FV;'S/|;'S;=`1g<%lO/|~8SWOY/|Zu/|uv0cv#W/|#W#X8l#X;'S/|;'S;=`1g<%lO/|~8oWOY/|Zu/|uv0cv#]/|#]#^5l#^;'S/|;'S;=`1g<%lO/|~9[Ptu9_~9bR#`#a9k#g#h:W#j#k:d~9nP#]#^9q~9tP#g#h9w~9zP#h#i9}~:QQ}!O,j!`!a,U~:ZP#X#Y:^~:aP#h#i,O~:gP#T#U:j~:mP#f#g:p~:sP#g#h,O~:yP#b#c:|~;PP#c#d;S~;VP#k#l;Y~;]P!`!a;`~;cP!`!a;f~;kO_~~;nYX^<^pq<^#y#z<^$f$g<^#BY#BZ<^$IS$I_<^$I|$JO<^$JT$JU<^$KV$KW<^&FU&FV<^~<cOY~~<fP!b!c<i~<lUOY<iZ!b<i!b!c=O!c;'S<i;'S;=`=|<%lO<i~=RUOY<iZ!b<i!b!c=e!c;'S<i;'S;=`=|<%lO<i~=jUQ~OY<iZ!b<i!b!c=e!c;'S<i;'S;=`=|<%lO<i~>PP;=`<%l<i~>VQ!}#O>]#]#^?T~>`SOY>lZ;'S>l;'S;=`>}<%lO>l~>oP#P#Q>r~>uP#P#Q>x~>}OW~~?QP;=`<%l>l~?WP#a#b?Z~?^P#Z#[?a~?dP!}#O?g~?jZtu?g|}?g}!O?g!O!P?g!P!Q?g!Q![?g![!]?g!c!}?g#P#Q@]#R#S?g#T#o?g~@`P#P#Q@c~@hO^~~@kP#R#S@n~@qUOY@nZ#R@n#R#SAT#S;'S@n;'S;=`BR<%lO@n~AWUOY@nZ#R@n#R#SAj#S;'S@n;'S;=`BR<%lO@n~AoUU~OY@nZ#R@n#R#SAj#S;'S@n;'S;=`BR<%lO@n~BUP;=`<%l@n~B[P#]#^B_~BbP#`#aBe~BhP#h#iBk~BnP#X#YBq~BtP#f#gBw~BzP!_!`,U~CQP#r#sCT~CWUOYCTZ#rCT#r#sCj#s;'SCT;'S;=`Dh<%lOCT~CmUOYCTZ#rCT#r#sDP#s;'SCT;'S;=`Dh<%lOCT~DUUS~OYCTZ#rCT#r#sDP#s;'SCT;'S;=`Dh<%lOCT~DkP;=`<%lCT",
  tokenizers: [0],
  topRules: {"Program":[0,1]},
  tokenPrec: 0
});

const headingProp = new NodeProp();
const tiddlywikiLanguage = LRLanguage.define({
    parser: parser.configure({
        props: [
            indentNodeProp.add({
                Application: delimitedIndent({ closing: ')', align: false })
            }),
            foldNodeProp.add({
                Application: foldInside
            }),
            headingProp.add(isHeading),
            styleTags({
                Macro: tags.variableName,
                Keyword: tags.keyword,
                Image: tags.strong,
                Heading: tags.heading,
                Delete: tags.strikethrough,
                Bold: tags.strong,
                Underline: tags.strong,
                Identifier: tags.strong,
                Italic: tags.emphasis,
                Link: tags.link,
                // TODO use list
                List: tags.number,
                Blockquote: tags.quote,
                LineComment: tags.blockComment,
                Definition: tags.strong
            })
        ]
    }),
    languageData: {
        commentTokens: {
            block: {
                open: '<!--',
                close: '-->'
            }
        }
    }
});
// export const tiddlywikiCompletion = tiddlywikiLanguage.data.of({
// autocomplete: completeFromList([
//   { label: 'tiddlywiki', type: 'keyword' },
//   { label: 'define', type: 'keyword' },
//   { label: 'let', type: 'keyword' }
// ])
// });
function tiddlywiki() {
    return new LanguageSupport(tiddlywikiLanguage, []);
}
function isHeading(type) {
    let match = /^(?:ATX|Setext)Heading(\d)$/.exec(type.name);
    return match ? +match[1] : undefined;
}

export { tiddlywiki, tiddlywikiLanguage };
