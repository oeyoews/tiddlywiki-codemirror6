import { LRParser } from '@lezer/lr';
import { NodeProp } from '@lezer/common';
import { LRLanguage, indentNodeProp, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';
import { styleTags, tags } from '@lezer/highlight';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = LRParser.deserialize({
  version: 14,
  states: "nQVQPOOOOQO'#Co'#CoOOQO'#Ck'#CkQVQPOOOOQO-E6i-E6i",
  stateData: "!Q~ObOS~OQPORPOSPOTPOUPOVPOWPOXPOYPOZPO[PO]PO^PO~O",
  goto: "odPPPPPPPPPPPPPPPePPPkQRORSRTQOR",
  nodeNames: "âš  Program Identifier Heading Delete Bold UnderLine Italic List Blockquote LineComment Definition Keyword Image Macro",
  maxTerm: 19,
  skippedNodes: [0],
  repeatNodeCount: 1,
  tokenData: "FY~RaXY!WYZ!W]^!Wpq!Wqr!ist#vwx$n!P!Q&_!]!^(O!^!_(g!`!a;n!b!c<f!}#O>V#R#SA|#Y#ZCm#o#pDc#r#sDi~!]Sb~XY!WYZ!W]^!Wpq!W~!lZX^#_pq#_qr!i#y#z#_$f$g#_#BY#BZ#_$IS$I_#_$I|$JO#_$JT$JU#_$KV$KW#_&FU&FV#_~#dSR~OY#_Z;'S#_;'S;=`#p<%lO#_~#sP;=`<%l#_~#yYX^$ipq$i#y#z$i$f$g$i#BY#BZ$i$IS$I_$i$I|$JO$i$JT$JU$i$KV$KW$i&FU&FV$i~$nOW~~$qPwx$t~$wUOY$tZw$twx%Zx;'S$t;'S;=`&X<%lO$t~%^UOY$tZw$twx%px;'S$t;'S;=`&X<%lO$t~%uUT~OY$tZw$twx%px;'S$t;'S;=`&X<%lO$t~&[P;=`<%l$t~&bP!P!Q&e~&hUOY&eZ!P&e!P!Q&z!Q;'S&e;'S;=`'x<%lO&e~&}UOY&eZ!P&e!P!Q'a!Q;'S&e;'S;=`'x<%lO&e~'fUV~OY&eZ!P&e!P!Q'a!Q;'S&e;'S;=`'x<%lO&e~'{P;=`<%l&e~(TSZ~OY(OZ;'S(O;'S;=`(a<%lO(O~(dP;=`<%l(O~(jTqr(ytu+]uv/^!P!Q9[!^!_:y~(|P}!O)P~)SP}!O)V~)YUOY)VZ})V}!O)l!O;'S)V;'S;=`+V<%lO)V~)oUOY)VZ})V}!O*R!O;'S)V;'S;=`+V<%lO)V~*UWOY)VZ})V}!O*R!O!`)V!`!a*n!a;'S)V;'S;=`+V<%lO)V~*sUY~OY)VZ})V}!O)l!O;'S)V;'S;=`+V<%lO)V~+YP;=`<%l)V~+`S#`#a+l#g#h.[#h#i.n#j#k.z~+oP#]#^+r~+uQ#b#c+{#g#h,^~,OP#_#`,R~,UP!`!a,X~,^O[~~,aP#h#i,d~,gQpq,X}!O,m~,pQ#X#Y,v#h#i-`~,yP#a#b,|~-PP#d#e-S~-VP#h#i-Y~-]P#m#n,R~-cP#X#Y-f~-iP#a#b-l~-oP#d#e-r~-uP#`#a-x~-{P#T#U.O~.RP#h#i.U~.XP#X#Y,R~._P#X#Y.b~.eP#h#i.h~.kPpq,X~.qP#X#Y.t~.wP#l#m.b~.}P#T#U/Q~/TP#f#g/W~/ZP#g#h.h~/aPpq/d~/gWOY0PZu0Puv0fv#X0P#X#Y1p#Y;'S0P;'S;=`1j<%lO0P~0SUOY0PZu0Puv0fv;'S0P;'S;=`1j<%lO0P~0iWOY0PZu0Puv0fv!`0P!`!a1R!a;'S0P;'S;=`1j<%lO0P~1WU[~OY0PZu0Puv0fv;'S0P;'S;=`1j<%lO0P~1mP;=`<%l0P~1sYOY0PZu0Puv0fv#`0P#`#a2c#a#b0P#b#c8S#c;'S0P;'S;=`1j<%lO0P~2fWOY0PZu0Puv0fv#g0P#g#h3O#h;'S0P;'S;=`1j<%lO0P~3RWOY0PZu0Puv0fv#X0P#X#Y3k#Y;'S0P;'S;=`1j<%lO0P~3nmOX0PXY0PYZ5iZ^0P^p0Ppq0Pqu0Puv0fv#]0P#]#^5o#^#y0P#y#z0P#z$f0P$f$g0P$g#BY0P#BY#BZ0P#BZ$IS0P$IS$I_0P$I_$I|0P$I|$JO0P$JO$JT0P$JT$JU0P$JU$KV0P$KV$KW0P$KW&FU0P&FU&FV0P&FV;'S0P;'S;=`1j<%lO0P~5lPuv,R~5rWOY0PZu0Puv0fv#Y0P#Y#Z6[#Z;'S0P;'S;=`1j<%lO0P~6_kOX0PXY0PYZ5iZ^0P^p0Ppq0Pqu0Puv0fv#y0P#y#z0P#z$f0P$f$g0P$g#BY0P#BY#BZ0P#BZ$IS0P$IS$I_0P$I_$I|0P$I|$JO0P$JO$JT0P$JT$JU0P$JU$KV0P$KV$KW0P$KW&FU0P&FU&FV0P&FV;'S0P;'S;=`1j<%lO0P~8VWOY0PZu0Puv0fv#W0P#W#X8o#X;'S0P;'S;=`1j<%lO0P~8rWOY0PZu0Puv0fv#]0P#]#^5o#^;'S0P;'S;=`1j<%lO0P~9_Ptu9b~9eR#`#a9n#g#h:Z#j#k:g~9qP#]#^9t~9wP#g#h9z~9}P#h#i:Q~:TQ}!O,m!`!a,X~:^P#X#Y:a~:dP#h#i,R~:jP#T#U:m~:pP#f#g:s~:vP#g#h,R~:|P#b#c;P~;SP#c#d;V~;YP#k#l;]~;`P!`!a;c~;fP!`!a;i~;nO^~~;qYX^<apq<a#y#z<a$f$g<a#BY#BZ<a$IS$I_<a$I|$JO<a$JT$JU<a$KV$KW<a&FU&FV<a~<fOX~~<iP!b!c<l~<oUOY<lZ!b<l!b!c=R!c;'S<l;'S;=`>P<%lO<l~=UUOY<lZ!b<l!b!c=h!c;'S<l;'S;=`>P<%lO<l~=mUQ~OY<lZ!b<l!b!c=h!c;'S<l;'S;=`>P<%lO<l~>SP;=`<%l<l~>YQ!}#O>`#]#^Ag~>cWOY>`Z#P>`#P#Q>{#Q#q>`#q#r@V#r;'S>`;'S;=`Aa<%lO>`~?OWOY>`Z#P>`#P#Q?h#Q#q>`#q#r@V#r;'S>`;'S;=`Aa<%lO>`~?mW]~OY>`Z#P>`#P#Q?h#Q#q>`#q#r@V#r;'S>`;'S;=`Aa<%lO>`~@YWOY>`Z#P>`#P#Q>{#Q#q>`#q#r@r#r;'S>`;'S;=`Aa<%lO>`~@wW]~OY>`Z#P>`#P#Q>{#Q#q>`#q#r@r#r;'S>`;'S;=`Aa<%lO>`~AdP;=`<%l>`~AjP#a#bAm~ApP#Z#[As~AvQpq>`!}#O>`~BPP#R#SBS~BVUOYBSZ#RBS#R#SBi#S;'SBS;'S;=`Cg<%lOBS~BlUOYBSZ#RBS#R#SCO#S;'SBS;'S;=`Cg<%lOBS~CTUU~OYBSZ#RBS#R#SCO#S;'SBS;'S;=`Cg<%lOBS~CjP;=`<%lBS~CpP#]#^Cs~CvP#`#aCy~C|P#h#iDP~DSP#X#YDV~DYP#f#gD]~D`P!_!`,X~DfP#o#p>`~DlP#r#sDo~DrUOYDoZ#rDo#r#sEU#s;'SDo;'S;=`FS<%lODo~EXUOYDoZ#rDo#r#sEk#s;'SDo;'S;=`FS<%lODo~EpUS~OYDoZ#rDo#r#sEk#s;'SDo;'S;=`FS<%lODo~FVP;=`<%lDo",
  tokenizers: [0],
  topRules: {"Program":[0,1]},
  tokenPrec: 0
});

const headingProp = new NodeProp();
const tiddlywikiLanguage = LRLanguage.define({
    parser: parser.configure({
        props: [
            indentNodeProp.add({
                Application: delimitedIndent({ closing: ')', align: false })
            }),
            foldNodeProp.add({
                Application: foldInside
            }),
            headingProp.add(isHeading),
            styleTags({
                Macro: tags.variableName,
                Keyword: tags.keyword,
                Image: tags.strong,
                Heading: tags.heading,
                Delete: tags.strikethrough,
                Bold: tags.strong,
                Underline: tags.strong,
                Identifier: tags.strong,
                Italic: tags.emphasis,
                // TODO use list
                List: tags.number,
                Blockquote: tags.quote,
                LineComment: tags.blockComment,
                Definition: tags.strong
            })
        ]
    }),
    languageData: {
        commentTokens: {
            block: {
                open: '<!--',
                close: '-->'
            }
        }
    }
});
// export const tiddlywikiCompletion = tiddlywikiLanguage.data.of({
// autocomplete: completeFromList([
//   { label: 'tiddlywiki', type: 'keyword' },
//   { label: 'define', type: 'keyword' },
//   { label: 'let', type: 'keyword' }
// ])
// });
function tiddlywiki() {
    return new LanguageSupport(tiddlywikiLanguage, []);
}
function isHeading(type) {
    let match = /^(?:ATX|Setext)Heading(\d)$/.exec(type.name);
    return match ? +match[1] : undefined;
}

export { tiddlywiki, tiddlywikiLanguage };
