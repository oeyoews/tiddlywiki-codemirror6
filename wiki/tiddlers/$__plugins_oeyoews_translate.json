[
    {
        "title": "$:/plugins/oeyoews/translate",
        "type": "application/json",
        "created": "20231103020000000",
        "text": "{\"tiddlers\":{\"$:/plugins/oeyoews/translate/readme\":{\"title\":\"$:/plugins/oeyoews/translate/readme\",\"text\":\"<!-- plugin template readme -->\\n\\n> 默认翻译引擎为 Google Translate\\n\\n## Usage\\n\\n- 在 tiddler 的字段上添加一个 `translate: yes`, 就会自动显示翻译按钮了.\\n\\n## Recipes\\n\\n- 建议翻译纯文本, 不建议翻译带有 wikitext, 因为 wikitext 不支持全角字符 ! 等字符, 所以一些标题不会被识别, markdown 遇到 ## 会报错\\n\\n~~其实也可以将翻译的内容提前渲染成 html, 然后翻译(还没试过)~~ 试过了, 不行, 有 bug.\\n\\n## Motivation\\n\\n<!-- your plugin motivation, or why you write this plugin -->\\n\",\"type\":\"text/markdown\",\"description\":\"translate\"},\"$:/plugins/oeyoews/translate/startup.js\":{\"title\":\"$:/plugins/oeyoews/translate/startup.js\",\"text\":\"/*\\\\\\r\\ntitle: $:/plugins/oeyoews/translate/startup.js\\r\\ntype: application/javascript\\r\\nmodule-type: startup\\r\\n\\r\\ntranslate startup\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nexports.name = 'translate-startup-hook';\\r\\nexports.platforms = ['browser'];\\r\\nexports.after = ['startup'];\\r\\nexports.synchronous = true;\\r\\nexports.startup = () => {\\r\\n  const translate = require('./translate');\\r\\n\\r\\n  $tw.rootWidget.addEventListener('om-translate-tiddler', (event) =>\\r\\n    translate(event.tiddlerTitle)\\r\\n  );\\r\\n};\\r\\n\",\"type\":\"application/javascript\",\"module-type\":\"startup\"},\"$:/plugins/oeyoews/translate/translate.js\":{\"title\":\"$:/plugins/oeyoews/translate/translate.js\",\"text\":\"/*\\\\\\r\\ntitle: $:/plugins/oeyoews/translate/translate.js\\r\\ntype: application/javascript\\r\\nmodule-type: library\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nconst translate = require('./translate.min.js');\\r\\nconst story = new $tw.Story();\\r\\n\\r\\n// TODO: support cn <--> zh on viewtoolbar\\r\\n// TODO: support translate english title\\r\\n// TODO: add notify\\r\\n// TODO: 遇到 `#` 会报错.\\r\\n\\r\\nmodule.exports = async function (title) {\\r\\n  const type = $tw.wiki.getTiddler(title).fields.type;\\r\\n  const content = $tw.wiki.getTiddlerText(title);\\r\\n  // rendertext/rendertiddler 会渲染出多余的模板代码. 直接加载 原型上的md, 也是这样, 需要直接加载vanilla md\\r\\n  // 也有bug\\r\\n  // const MarkdownIt = require('$:/plugins/tiddlywiki/markdown/markdown-it.js');\\r\\n  // const md = new MarkdownIt();\\r\\n\\r\\n  const nprogress = $tw.NProgress;\\r\\n\\r\\n  nprogress.start();\\r\\n\\r\\n  try {\\r\\n    const translatedTitle = await translate(title, 'zh');\\r\\n    const newTitle =\\r\\n      String(translatedTitle).toLocaleLowerCase() === title.toLocaleLowerCase()\\r\\n        ? title + '-cn'\\r\\n        : translatedTitle;\\r\\n    // NOTE: 似乎每次的翻译内容不会100%保持一致, 所以无法防止多次重复翻译\\r\\n    // 需要检查 english title to cn title, 的tiddler 是否存在过\\r\\n    if ($tw.wiki.tiddlerExists(newTitle)) {\\r\\n      console.warn(newTitle, ' 条目已存在');\\r\\n      story.navigateTiddler(newTitle);\\r\\n      nprogress.done();\\r\\n      return false;\\r\\n    }\\r\\n    const text = await translate(content, 'zh');\\r\\n    $tw.wiki.addTiddler({\\r\\n      title: newTitle,\\r\\n      text,\\r\\n      type\\r\\n    });\\r\\n\\r\\n    // 添加字段, 为模板数据做准备\\r\\n    // $tw.wiki.setText(title, 'cn', null, newTitle, {\\r\\n    //   suppressTimestamp: true\\r\\n    // });\\r\\n    // $tw.wiki.setText(newTitle, 'en', null, title, {\\r\\n    //   suppressTimestamp: true\\r\\n    // });\\r\\n    story.navigateTiddler(newTitle);\\r\\n    nprogress.done();\\r\\n    $tw.Confetti.pretty();\\r\\n  } catch (e) {\\r\\n    console.warn(e);\\r\\n    nprogress.done();\\r\\n  }\\r\\n};\\r\\n\",\"type\":\"application/javascript\",\"module-type\":\"library\"},\"$:/plugins/oeyoews/translate/translate.min.js\":{\"title\":\"$:/plugins/oeyoews/translate/translate.min.js\",\"text\":\"var iso = { aar: \\\"aa\\\", abk: \\\"ab\\\", afr: \\\"af\\\", aka: \\\"ak\\\", alb: \\\"sq\\\", amh: \\\"am\\\", ara: \\\"ar\\\", arg: \\\"an\\\", arm: \\\"hy\\\", asm: \\\"as\\\", ava: \\\"av\\\", ave: \\\"ae\\\", aym: \\\"ay\\\", aze: \\\"az\\\", bak: \\\"ba\\\", bam: \\\"bm\\\", baq: \\\"eu\\\", bel: \\\"be\\\", ben: \\\"bn\\\", bih: \\\"bh\\\", bis: \\\"bi\\\", bos: \\\"bs\\\", bre: \\\"br\\\", bul: \\\"bg\\\", bur: \\\"my\\\", cat: \\\"ca\\\", cha: \\\"ch\\\", che: \\\"ce\\\", chi: \\\"zh\\\", chu: \\\"cu\\\", chv: \\\"cv\\\", cor: \\\"kw\\\", cos: \\\"co\\\", cre: \\\"cr\\\", cze: \\\"cs\\\", dan: \\\"da\\\", div: \\\"dv\\\", dut: \\\"nl\\\", dzo: \\\"dz\\\", eng: \\\"en\\\", epo: \\\"eo\\\", est: \\\"et\\\", ewe: \\\"ee\\\", fao: \\\"fo\\\", fij: \\\"fj\\\", fin: \\\"fi\\\", fre: \\\"fr\\\", fry: \\\"fy\\\", ful: \\\"ff\\\", geo: \\\"ka\\\", ger: \\\"de\\\", gla: \\\"gd\\\", gle: \\\"ga\\\", glg: \\\"gl\\\", glv: \\\"gv\\\", gre: \\\"el\\\", grn: \\\"gn\\\", guj: \\\"gu\\\", hat: \\\"ht\\\", hau: \\\"ha\\\", heb: \\\"he\\\", her: \\\"hz\\\", hin: \\\"hi\\\", hmo: \\\"ho\\\", hrv: \\\"hr\\\", hun: \\\"hu\\\", ibo: \\\"ig\\\", ice: \\\"is\\\", ido: \\\"io\\\", iii: \\\"ii\\\", iku: \\\"iu\\\", ile: \\\"ie\\\", ina: \\\"ia\\\", ind: \\\"id\\\", ipk: \\\"ik\\\", ita: \\\"it\\\", jav: \\\"jv\\\", jpn: \\\"ja\\\", kal: \\\"kl\\\", kan: \\\"kn\\\", kas: \\\"ks\\\", kau: \\\"kr\\\", kaz: \\\"kk\\\", khm: \\\"km\\\", kik: \\\"ki\\\", kin: \\\"rw\\\", kir: \\\"ky\\\", kom: \\\"kv\\\", kon: \\\"kg\\\", kor: \\\"ko\\\", kua: \\\"kj\\\", kur: \\\"ku\\\", lao: \\\"lo\\\", lat: \\\"la\\\", lav: \\\"lv\\\", lim: \\\"li\\\", lin: \\\"ln\\\", lit: \\\"lt\\\", ltz: \\\"lb\\\", lub: \\\"lu\\\", lug: \\\"lg\\\", mac: \\\"mk\\\", mah: \\\"mh\\\", mal: \\\"ml\\\", mao: \\\"mi\\\", mar: \\\"mr\\\", may: \\\"ms\\\", mlg: \\\"mg\\\", mlt: \\\"mt\\\", mon: \\\"mn\\\", nau: \\\"na\\\", nav: \\\"nv\\\", nbl: \\\"nr\\\", nde: \\\"nd\\\", ndo: \\\"ng\\\", nep: \\\"ne\\\", nno: \\\"nn\\\", nob: \\\"nb\\\", nor: \\\"no\\\", nya: \\\"ny\\\", oci: \\\"oc\\\", oji: \\\"oj\\\", ori: \\\"or\\\", orm: \\\"om\\\", oss: \\\"os\\\", pan: \\\"pa\\\", per: \\\"fa\\\", pli: \\\"pi\\\", pol: \\\"pl\\\", por: \\\"pt\\\", pus: \\\"ps\\\", que: \\\"qu\\\", roh: \\\"rm\\\", rum: \\\"ro\\\", run: \\\"rn\\\", rus: \\\"ru\\\", sag: \\\"sg\\\", san: \\\"sa\\\", sin: \\\"si\\\", slo: \\\"sk\\\", slv: \\\"sl\\\", sme: \\\"se\\\", smo: \\\"sm\\\", sna: \\\"sn\\\", snd: \\\"sd\\\", som: \\\"so\\\", sot: \\\"st\\\", spa: \\\"es\\\", srd: \\\"sc\\\", srp: \\\"sr\\\", ssw: \\\"ss\\\", sun: \\\"su\\\", swa: \\\"sw\\\", swe: \\\"sv\\\", tah: \\\"ty\\\", tam: \\\"ta\\\", tat: \\\"tt\\\", tel: \\\"te\\\", tgk: \\\"tg\\\", tgl: \\\"tl\\\", tha: \\\"th\\\", tib: \\\"bo\\\", tir: \\\"ti\\\", ton: \\\"to\\\", tsn: \\\"tn\\\", tso: \\\"ts\\\", tuk: \\\"tk\\\", tur: \\\"tr\\\", twi: \\\"tw\\\", uig: \\\"ug\\\", ukr: \\\"uk\\\", urd: \\\"ur\\\", uzb: \\\"uz\\\", ven: \\\"ve\\\", vie: \\\"vi\\\", vol: \\\"vo\\\", wel: \\\"cy\\\", wln: \\\"wa\\\", wol: \\\"wo\\\", xho: \\\"xh\\\", yid: \\\"yi\\\", yor: \\\"yo\\\", zha: \\\"za\\\", zul: \\\"zu\\\" }, names = { afar: \\\"aa\\\", abkhazian: \\\"ab\\\", afrikaans: \\\"af\\\", akan: \\\"ak\\\", albanian: \\\"sq\\\", amharic: \\\"am\\\", arabic: \\\"ar\\\", aragonese: \\\"an\\\", armenian: \\\"hy\\\", assamese: \\\"as\\\", avaric: \\\"av\\\", avestan: \\\"ae\\\", aymara: \\\"ay\\\", azerbaijani: \\\"az\\\", bashkir: \\\"ba\\\", bambara: \\\"bm\\\", basque: \\\"eu\\\", belarusian: \\\"be\\\", bengali: \\\"bn\\\", \\\"bihari languages\\\": \\\"bh\\\", bislama: \\\"bi\\\", tibetan: \\\"bo\\\", bosnian: \\\"bs\\\", breton: \\\"br\\\", bulgarian: \\\"bg\\\", burmese: \\\"my\\\", catalan: \\\"ca\\\", valencian: \\\"ca\\\", czech: \\\"cs\\\", chamorro: \\\"ch\\\", chechen: \\\"ce\\\", chinese: \\\"zh\\\", \\\"church slavic\\\": \\\"cu\\\", \\\"old slavonic\\\": \\\"cu\\\", \\\"church slavonic\\\": \\\"cu\\\", \\\"old bulgarian\\\": \\\"cu\\\", \\\"old church slavonic\\\": \\\"cu\\\", chuvash: \\\"cv\\\", cornish: \\\"kw\\\", corsican: \\\"co\\\", cree: \\\"cr\\\", welsh: \\\"cy\\\", danish: \\\"da\\\", german: \\\"de\\\", divehi: \\\"dv\\\", dhivehi: \\\"dv\\\", maldivian: \\\"dv\\\", dutch: \\\"nl\\\", flemish: \\\"nl\\\", dzongkha: \\\"dz\\\", greek: \\\"el\\\", english: \\\"en\\\", esperanto: \\\"eo\\\", estonian: \\\"et\\\", ewe: \\\"ee\\\", faroese: \\\"fo\\\", persian: \\\"fa\\\", fijian: \\\"fj\\\", finnish: \\\"fi\\\", french: \\\"fr\\\", \\\"western frisian\\\": \\\"fy\\\", fulah: \\\"ff\\\", georgian: \\\"ka\\\", gaelic: \\\"gd\\\", \\\"scottish gaelic\\\": \\\"gd\\\", irish: \\\"ga\\\", galician: \\\"gl\\\", manx: \\\"gv\\\", guarani: \\\"gn\\\", gujarati: \\\"gu\\\", haitian: \\\"ht\\\", \\\"haitian creole\\\": \\\"ht\\\", hausa: \\\"ha\\\", hebrew: \\\"he\\\", herero: \\\"hz\\\", hindi: \\\"hi\\\", \\\"hiri motu\\\": \\\"ho\\\", croatian: \\\"hr\\\", hungarian: \\\"hu\\\", igbo: \\\"ig\\\", icelandic: \\\"is\\\", ido: \\\"io\\\", \\\"sichuan yi\\\": \\\"ii\\\", nuosu: \\\"ii\\\", inuktitut: \\\"iu\\\", interlingue: \\\"ie\\\", occidental: \\\"ie\\\", interlingua: \\\"ia\\\", indonesian: \\\"id\\\", inupiaq: \\\"ik\\\", italian: \\\"it\\\", javanese: \\\"jv\\\", japanese: \\\"ja\\\", kalaallisut: \\\"kl\\\", greenlandic: \\\"kl\\\", kannada: \\\"kn\\\", kashmiri: \\\"ks\\\", kanuri: \\\"kr\\\", kazakh: \\\"kk\\\", \\\"central khmer\\\": \\\"km\\\", kikuyu: \\\"ki\\\", gikuyu: \\\"ki\\\", kinyarwanda: \\\"rw\\\", kirghiz: \\\"ky\\\", kyrgyz: \\\"ky\\\", komi: \\\"kv\\\", kongo: \\\"kg\\\", korean: \\\"ko\\\", kuanyama: \\\"kj\\\", kwanyama: \\\"kj\\\", kurdish: \\\"ku\\\", lao: \\\"lo\\\", latin: \\\"la\\\", latvian: \\\"lv\\\", limburgan: \\\"li\\\", limburger: \\\"li\\\", limburgish: \\\"li\\\", lingala: \\\"ln\\\", lithuanian: \\\"lt\\\", luxembourgish: \\\"lb\\\", letzeburgesch: \\\"lb\\\", \\\"luba-katanga\\\": \\\"lu\\\", ganda: \\\"lg\\\", macedonian: \\\"mk\\\", marshallese: \\\"mh\\\", malayalam: \\\"ml\\\", maori: \\\"mi\\\", marathi: \\\"mr\\\", malay: \\\"ms\\\", malagasy: \\\"mg\\\", maltese: \\\"mt\\\", mongolian: \\\"mn\\\", nauru: \\\"na\\\", navajo: \\\"nv\\\", navaho: \\\"nv\\\", \\\"ndebele, south\\\": \\\"nr\\\", \\\"south ndebele\\\": \\\"nr\\\", \\\"ndebele, north\\\": \\\"nd\\\", \\\"north ndebele\\\": \\\"nd\\\", ndonga: \\\"ng\\\", nepali: \\\"ne\\\", \\\"norwegian nynorsk\\\": \\\"nn\\\", \\\"nynorsk, norwegian\\\": \\\"nn\\\", \\\"norwegian bokmål\\\": \\\"nb\\\", \\\"bokmål, norwegian\\\": \\\"nb\\\", norwegian: \\\"no\\\", chichewa: \\\"ny\\\", chewa: \\\"ny\\\", nyanja: \\\"ny\\\", occitan: \\\"oc\\\", ojibwa: \\\"oj\\\", oriya: \\\"or\\\", oromo: \\\"om\\\", ossetian: \\\"os\\\", ossetic: \\\"os\\\", panjabi: \\\"pa\\\", punjabi: \\\"pa\\\", pali: \\\"pi\\\", polish: \\\"pl\\\", portuguese: \\\"pt\\\", pushto: \\\"ps\\\", pashto: \\\"ps\\\", quechua: \\\"qu\\\", romansh: \\\"rm\\\", romanian: \\\"ro\\\", moldavian: \\\"ro\\\", moldovan: \\\"ro\\\", rundi: \\\"rn\\\", russian: \\\"ru\\\", sango: \\\"sg\\\", sanskrit: \\\"sa\\\", sinhala: \\\"si\\\", sinhalese: \\\"si\\\", slovak: \\\"sk\\\", slovenian: \\\"sl\\\", \\\"northern sami\\\": \\\"se\\\", samoan: \\\"sm\\\", shona: \\\"sn\\\", sindhi: \\\"sd\\\", somali: \\\"so\\\", \\\"sotho, southern\\\": \\\"st\\\", spanish: \\\"es\\\", castilian: \\\"es\\\", sardinian: \\\"sc\\\", serbian: \\\"sr\\\", swati: \\\"ss\\\", sundanese: \\\"su\\\", swahili: \\\"sw\\\", swedish: \\\"sv\\\", tahitian: \\\"ty\\\", tamil: \\\"ta\\\", tatar: \\\"tt\\\", telugu: \\\"te\\\", tajik: \\\"tg\\\", tagalog: \\\"tl\\\", thai: \\\"th\\\", tigrinya: \\\"ti\\\", tonga: \\\"to\\\", tswana: \\\"tn\\\", tsonga: \\\"ts\\\", turkmen: \\\"tk\\\", turkish: \\\"tr\\\", twi: \\\"tw\\\", uighur: \\\"ug\\\", uyghur: \\\"ug\\\", ukrainian: \\\"uk\\\", urdu: \\\"ur\\\", uzbek: \\\"uz\\\", venda: \\\"ve\\\", vietnamese: \\\"vi\\\", \\\"volapük\\\": \\\"vo\\\", walloon: \\\"wa\\\", wolof: \\\"wo\\\", xhosa: \\\"xh\\\", yiddish: \\\"yi\\\", yoruba: \\\"yo\\\", zhuang: \\\"za\\\", chuang: \\\"za\\\", zulu: \\\"zu\\\" }; const isoKeys = Object.values(iso).sort(); var languages = e => { if (\\\"string\\\" != typeof e) throw new Error('The \\\"language\\\" must be a string, received ' + typeof e); if (e.length > 100) throw new Error(`The \\\"language\\\" is too long at ${e.length} characters`); if (e = e.toLowerCase(), e = names[e] || iso[e] || e, !isoKeys.includes(e)) throw new Error(`The language \\\"${e}\\\" is not part of the ISO 639-1`); return e }; function Cache() { var e = Object.create(null); function a(a) { delete e[a] } this.set = function (n, i, r) { if (void 0 !== r && (\\\"number\\\" != typeof r || isNaN(r) || r <= 0)) throw new Error(\\\"Cache timeout must be a positive number\\\"); var t = e[n]; t && clearTimeout(t.timeout); var o = { value: i, expire: r + Date.now() }; return isNaN(o.expire) || (o.timeout = setTimeout((() => a(n)), r)), e[n] = o, i }, this.del = function (n) { var i = !0, r = e[n]; return r ? (clearTimeout(r.timeout), !isNaN(r.expire) && r.expire < Date.now() && (i = !1)) : i = !1, i && a(n), i }, this.clear = function () { for (var a in e) clearTimeout(e[a].timeout); e = Object.create(null) }, this.get = function (a) { var n = e[a]; if (void 0 !== n) { if (isNaN(n.expire) || n.expire >= Date.now()) return n.value; delete e[a] } return null } } const exp$1 = new Cache; exp$1.Cache = Cache; const base = \\\"https://translate.googleapis.com/translate_a/single\\\"; var google = { fetch: ({ key: e, from: a, to: n, text: i }) => [`${base}?client=gtx&sl=${a}&tl=${n}&dt=t&q=${encodeURI(i)}`], parse: e => e.json().then((e => { if (!(e = e && e[0] && e[0][0] && e[0].map((e => e[0])).join(\\\"\\\"))) throw new Error(\\\"Translation not found\\\"); return e })) }, yandex = { needkey: !0, fetch: ({ key: e, from: a, to: n, text: i }) => [`https://translate.yandex.net/api/v1.5/tr.json/translate?key=${e}&lang=${a}-${n}&text=${encodeURIComponent(i)}`, { method: \\\"POST\\\", body: \\\"\\\" }], parse: e => e.json().then((e => { if (200 !== e.code) throw new Error(e.message); return e.text[0] })) }; const libreUrl = \\\"https://libretranslate.com/translate\\\"; var libre = { needkey: !1, fetch: ({ url: e = libreUrl, key: a, from: n, to: i, text: r }) => [e, { method: \\\"POST\\\", body: JSON.stringify({ q: r, source: n, target: i, api_key: a }), headers: { \\\"Content-Type\\\": \\\"application/json\\\" } }], parse: e => e.json().then((e => { if (!e) throw new Error(\\\"No response found\\\"); if (e.error) throw new Error(e.error); if (!e.translatedText) throw new Error(\\\"No response found\\\"); return e.translatedText })) }, deepl = { needkey: !0, fetch: ({ key: e, from: a, to: n, text: i }) => [`https://api${/:fx$/.test(e) ? \\\"-free\\\" : \\\"\\\"}.deepl.com/v2/translate?auth_key=${e}&source_lang=${a}&target_lang=${n}&text=${i = encodeURIComponent(i)}`, { method: \\\"POST\\\", body: \\\"\\\" }], parse: async e => { if (!e.ok) { if (403 === e.status) throw new Error(\\\"Auth Error, please review the key for DeepL\\\"); throw new Error(`Error ${e.status}`) } return e.json().then((e => e.translations[0].text)) } }, engines = { google: google, yandex: yandex, libre: libre, deepl: deepl }; const Translate = function (e = {}) { if (!(this instanceof Translate)) return new Translate(e); const a = { from: \\\"en\\\", to: \\\"en\\\", cache: void 0, languages: languages, engines: engines, engine: \\\"google\\\", keys: {} }, n = async (e, a = {}) => { \\\"string\\\" == typeof a && (a = { to: a }), a.text = e, a.from = languages(a.from || n.from), a.to = languages(a.to || n.to), a.cache = a.cache || n.cache, a.engines = a.engines || {}, a.engine = a.engine || n.engine, a.url = a.url || n.url, a.id = a.id || `${a.url}:${a.from}:${a.to}:${a.engine}:${a.text}`, a.keys = a.keys || n.keys || {}; for (let e in n.keys) a.keys[e] = a.keys[e] || n.keys[e]; a.key = a.key || n.key || a.keys[a.engine]; const i = a.engines[a.engine] || n.engines[a.engine], r = exp$1.get(a.id); if (r) return Promise.resolve(r); if (a.to === a.from) return Promise.resolve(a.text); if (i.needkey && !a.key) throw new Error(`The engine \\\"${a.engine}\\\" needs a key, please provide it`); const t = i.fetch(a); return fetch(...t).then(i.parse).then((e => exp$1.set(a.id, e, a.cache))) }; for (let i in a) n[i] = void 0 === e[i] ? a[i] : e[i]; return n }, exp = new Translate; exp.Translate = Translate;\\nmodule.exports = exp\",\"type\":\"application/javascript\",\"module-type\":\"library\"},\"$:/plugins/oeyoews/translate/ui\":{\"title\":\"$:/plugins/oeyoews/translate/ui\",\"tags\":\"$:/tags/ViewToolbar\",\"list-before\":\"$:/core/ui/Buttons/close\",\"description\":\"translate tiddler\",\"caption\":\"Translate\",\"text\":\"\\\\whitespace trim\\n<$list filter=\\\"[all[current]!is[system]field:translate[yes]]\\\">\\n<$button message=\\\"om-translate-tiddler\\\" tooltip=\\\"format tiddler\\\" aria-label=\\\"translate\\\" class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n<$list filter=\\\"[[$:/info/browser/is/mobile]get[text]else[no]match[no]]\\\">\\n<!-- <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke-width=\\\"1.5\\\" stroke=\\\"currentColor\\\">\\n  <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"m10.5 21 5.25-11.25L21 21m-9-3h7.5M3 5.621a48.474 48.474 0 0 1 6-.371m0 0c1.12 0 2.233.038 3.334.114M9 5.25V3m3.334 2.364C11.176 10.658 7.69 15.08 3 17.502m9.334-12.138c.896.061 1.785.147 2.666.257m-4.589 8.495a18.023 18.023 0 0 1-3.827-5.802\\\" />\\n</svg> -->\\n<svg stroke=\\\"currentColor\\\" fill=\\\"currentColor\\\" stroke-width=\\\"0\\\" viewBox=\\\"0 0 16 16\\\" height=\\\"1em\\\" width=\\\"1em\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M4.545 6.714 4.11 8H3l1.862-5h1.284L8 8H6.833l-.435-1.286H4.545zm1.634-.736L5.5 3.956h-.049l-.679 2.022H6.18z\\\"></path><path d=\\\"M0 2a2 2 0 0 1 2-2h7a2 2 0 0 1 2 2v3h3a2 2 0 0 1 2 2v7a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2v-3H2a2 2 0 0 1-2-2V2zm2-1a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h7a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H2zm7.138 9.995c.193.301.402.583.63.846-.748.575-1.673 1.001-2.768 1.292.178.217.451.635.555.867 1.125-.359 2.08-.844 2.886-1.494.777.665 1.739 1.165 2.93 1.472.133-.254.414-.673.629-.89-1.125-.253-2.057-.694-2.82-1.284.681-.747 1.222-1.651 1.621-2.757H14V8h-3v1.047h.765c-.318.844-.74 1.546-1.272 2.13a6.066 6.066 0 0 1-.415-.492 1.988 1.988 0 0 1-.94.31z\\\"></path></svg>\\n</$list>\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\">\\n  <$text text=\\\"translate\\\"/>\\n</span>\\n</$list>\\n</$button>\\n</$list>\\n\"},\"$:/plugins/oeyoews/translate/widget.js\":{\"title\":\"$:/plugins/oeyoews/translate/widget.js\",\"text\":\"/*\\\\\\r\\ntitle: $:/plugins/oeyoews/translate/widget.js\\r\\ntype: application/javascript\\r\\nmodule-type: widget\\r\\n\\r\\ntranslate widget\\r\\n\\r\\n\\\\*/\\r\\nconst { widget: Widget } = require('$:/core/modules/widgets/widget.js');\\r\\n\\r\\nclass ExampleWidget extends Widget {\\r\\n  constructor(parseTreeNode, options) {\\r\\n    super(parseTreeNode, options);\\r\\n  }\\r\\n\\r\\n  render(parent, nextSibling) {\\r\\n    if (!$tw.browser) return;\\r\\n    this.parentDomNode = parent;\\r\\n    this.computeAttributes();\\r\\n    this.execute();\\r\\n\\r\\n    const createElement = $tw.utils.domMaker;\\r\\n\\r\\n    const domNode = createElement('button', {\\r\\n      text: 'translate'\\r\\n    });\\r\\n\\r\\n    domNode.addEventListener('click', () => this.translate());\\r\\n\\r\\n    parent.insertBefore(domNode, nextSibling);\\r\\n    this.domNodes.push(domNode);\\r\\n  }\\r\\n\\r\\n  async translate() {\\r\\n    // TODO: support engine options\\r\\n    // translate field, save, 或者直接保存到xxx-cn.tid\\r\\n    // loading text\\r\\n    const translate = require('./translate.min.js');\\r\\n    const title = this.getVariable('currentTiddler');\\r\\n    const content = $tw.wiki.getTiddlerText(title);\\r\\n    const text = await translate(content, 'zh');\\r\\n    $tw.wiki.setText(title, 'translate', null, text);\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @description translate widget\\r\\n */\\r\\nexports.twTranslate = ExampleWidget;\\r\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"}}}",
        "description": "translate",
        "author": "oeyoews",
        "version": "0.2.0",
        "core-version": ">=5.3.0",
        "plugin-type": "plugin",
        "name": "translate",
        "meat#disabled": "yes",
        "qrcode": "yes",
        "dependents": "$:/plugins/oeyoews/nprogress $:/plugins/oeyoews/confetti",
        "list": "readme"
    }
]