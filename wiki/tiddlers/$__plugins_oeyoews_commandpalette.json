{"tiddlers":{"$:/plugins/oeyoews/commandpalette/readme":{"title":"$:/plugins/oeyoews/commandpalette/readme","text":"!! 改于 $:/plugins/souk21/commandpalette\n\n* https://github.com/Souk21/TW-commandpalette\n\n!! Readme\n\n* 使用 tailwindcss, 重写部分样式\n* use tailwindcss, rewrite some styles\n\n[img[https://i.imgur.com/JNF1NKg.png]]\n\n!! TODO\n\n<!-- * suitable dark:invert -->\n* ctrl-shift-I 不起作用\n* support create tiddlers with tag\n<!-- * add masklayer -->\n* prevent stop scrollable\n<!-- * add search plugins -->\n<!-- * right search tips -->\n* suitable mobile style\n* support icons"},"$:/plugins/oeyoews/commandpalette/cmd":{"title":"$:/plugins/oeyoews/commandpalette/cmd","tags":"$:/tags/PageControls","list-before":"$:/core/ui/Buttons/more-page-actions","description":"Cmd","caption":"CMD","text":"\\whitespace trim\n<$button tooltip=\"open-command-palette\" aria-label=\"cmd\" message=\"open-command-palette\" class=<<tv-config-toolbar-class>>>\n<$list filter=\"[<tv-config-toolbar-icons>match[yes]]\">\n{{$:/plugins/oeyoews/commandpalette/icon}}\n</$list>\n<$list filter=\"[<tv-config-toolbar-text>match[yes]]\">\n<span class=\"tc-btn-text\">\n<$text text=\"CMd\"/>\n</span>\n</$list>\n</$button>"},"$:/plugins/oeyoews/cmp/commandpalettewidget.js":{"title":"$:/plugins/oeyoews/cmp/commandpalettewidget.js","text":"/*\\\ntitle: $:/plugins/oeyoews/cmp/commandpalettewidget.js\ntype: application/javascript\nmodule-type: widget\n\nCommand Palette Widget\n\\*/\n\nconst { widget: Widget } = require('$:/core/modules/widgets/widget.js');\nconst getTiddlersWithTag = require('./lib/getTiddlersWithTag');\nconst createElement = $tw.utils.domMaker;\nconst getActiveElement = require('./lib/getActiveElement');\nconst focusAtCaretPosition = require('./lib/focusAtCaretPosition');\nconst getCurrentSelection = require('./lib/getCurrentSelection');\n\nclass CommandPaletteWidget extends Widget {\n  constructor(parseTreeNode, options) {\n    super(parseTreeNode, options);\n    this.initialise(parseTreeNode, options);\n    this.currentSelection = 0; //0 is nothing selected, 1 is first result,...\n    this.symbolProviders = {};\n    this.actions = [];\n    this.triggers = [];\n    this.prefixes = [];\n    this.blockProviderChange = false;\n    this.defaultSettings = {\n      maxResults: 15,\n      maxResultHintSize: 45,\n      neverBasic: false,\n      showHistoryOnOpen: true,\n      escapeGoesBack: true,\n      alwaysPassSelection: true,\n      theme: '$:/plugins/oeyoews/commandpalette/Compact.css'\n    };\n    this.settings = {};\n    this.commandHistoryPath =\n      '$:/plugins/oeyoews/commandpalette/CommandPaletteHistory';\n    this.settingsPath =\n      '$:/plugins/oeyoews/commandpalette/CommandPaletteSettings';\n    this.searchStepsPath =\n      '$:/plugins/oeyoews/commandpalette/CommandPaletteSearchSteps';\n    this.customCommandsTag = '$:/tags/CommandPaletteCommand';\n    this.themesTag = '$:/tags/CommandPaletteTheme';\n    this.typeField = 'command-palette-type';\n    this.nameField = 'command-palette-name';\n    this.hintField = 'command-palette-hint';\n    this.modeField = 'command-palette-mode';\n    this.userInputField = 'command-palette-user-input';\n    this.caretField = 'command-palette-caret';\n    this.immediateField = 'command-palette-immediate';\n    this.triggerField = 'command-palette-trigger';\n    this.prefixField = 'command-palette-prefix';\n  }\n\n  actionStringBuilder(text) {\n    return (e) => this.invokeActionString(text, this, e);\n  }\n\n  actionStringInput(action, hint, e) {\n    this.blockProviderChange = true;\n    this.allowInputFieldSelection = true;\n    this.searchHint.innerText = hint;\n    this.searchContainer.value = '';\n    this.currentProvider = () => {};\n    this.currentResolver = (e) => {\n      this.invokeActionString(action, this, e, {\n        commandpaletteinput: this.searchContainer.value\n      });\n      this.closePalette();\n    };\n    this.showResults([]);\n    this.onInput(this.searchContainer.value);\n  }\n\n  invokeFieldMangler(tiddler, message, param, e) {\n    let action = `<$fieldmangler tiddler=\"${tiddler}\">\n\t\t\t<$action-sendmessage $message=\"${message}\" $param=\"${param}\"/>\n\t\t\t</$fieldmangler>`;\n    this.invokeActionString(action, this, e);\n  }\n\n  //filter = (tiddler, terms) => [tiddlers]\n  tagOperation(e, hintTiddler, hintTag, filter, allowNoSelection, message) {\n    this.blockProviderChange = true;\n    if (allowNoSelection) this.allowInputFieldSelection = true;\n    this.currentProvider = this.historyProviderBuilder(hintTiddler);\n    this.currentResolver = (e) => {\n      if (this.currentSelection === 0) return;\n      let tiddler = this.currentResults[this.currentSelection - 1].result.name;\n      this.currentProvider = (terms) => {\n        this.currentSelection = 0;\n        this.searchHint.innerText = hintTag;\n        let searches = filter(tiddler, terms);\n        searches = searches.map((s) => {\n          return { name: s };\n        });\n        this.showResults(searches);\n      };\n      this.searchContainer.value = '';\n      this.onInput(this.searchContainer.value);\n      this.currentResolver = (e) => {\n        if (!allowNoSelection && this.currentSelection === 0) return;\n        let tag = this.searchContainer.value;\n        if (this.currentSelection !== 0) {\n          tag = this.currentResults[this.currentSelection - 1].result.name;\n        }\n        this.invokeFieldMangler(tiddler, message, tag, e);\n        if (!e.getModifierState('Shift')) {\n          this.closePalette();\n        } else {\n          this.onInput(this.searchContainer.value);\n        }\n      };\n    };\n    this.searchContainer.value = '';\n    this.onInput(this.searchContainer.value);\n  }\n\n  refreshThemes(e) {\n    this.themes = getTiddlersWithTag(this.themesTag);\n    let found = false;\n    for (let theme of this.themes) {\n      let themeName = theme.fields.title;\n      if (themeName === this.settings.theme) {\n        found = true;\n        this.addTagIfNecessary(themeName, '$:/tags/Stylesheet', e);\n      } else {\n        this.invokeFieldMangler(\n          themeName,\n          'tm-remove-tag',\n          '$:/tags/Stylesheet',\n          e\n        );\n      }\n    }\n    if (found) return;\n    this.addTagIfNecessary(this.defaultSettings.theme, '$:/tags/Stylesheet', e);\n  }\n\n  //Re-adding an existing tag changes modification date\n  addTagIfNecessary(tiddler, tag, e) {\n    if (this.hasTag(tiddler, tag)) return;\n    this.invokeFieldMangler(tiddler, 'tm-add-tag', tag, e);\n  }\n\n  hasTag(tiddler, tag) {\n    return $tw.wiki.getTiddler(tiddler).fields.tags.includes(tag);\n  }\n\n  refreshCommands() {\n    this.actions = [];\n    this.actions.push({\n      name: 'Refresh Command Palette',\n      action: (e) => {\n        this.refreshCommandPalette();\n        this.promptCommand('');\n      },\n      keepPalette: true\n    });\n    this.actions.push({\n      name: 'Explorer',\n      action: (e) => this.explorer(e),\n      keepPalette: true\n    });\n    this.actions.push({\n      name: 'See History',\n      action: (e) => this.showHistory(e),\n      keepPalette: true\n    });\n    this.actions.push({\n      name: 'New Command Wizard',\n      action: (e) => this.newCommandWizard(e),\n      keepPalette: true\n    });\n    this.actions.push({\n      name: 'Add tag to tiddler',\n      action: (e) =>\n        this.tagOperation(\n          e,\n          'Pick tiddler to tag',\n          'Pick tag to add (⇧⏎ to add multiple)',\n          (tiddler, terms) =>\n            $tw.wiki.filterTiddlers(\n              `[!is[system]tags[]] [is[system]tags[]] -[[${tiddler}]tags[]] +[search[${terms}]]`\n            ),\n          true,\n          'tm-add-tag'\n        ),\n      keepPalette: true\n    });\n    this.actions.push({\n      name: 'Remove tag',\n      action: (e) =>\n        this.tagOperation(\n          e,\n          'Pick tiddler to untag',\n          'Pick tag to remove (⇧⏎ to remove multiple)',\n          (tiddler, terms) =>\n            $tw.wiki.filterTiddlers(`[[${tiddler}]tags[]] +[search[${terms}]]`),\n          false,\n          'tm-remove-tag'\n        ),\n      keepPalette: true\n    });\n\n    let commandTiddlers = getTiddlersWithTag(this.customCommandsTag);\n    for (let tiddler of commandTiddlers) {\n      if (!tiddler.fields[this.typeField] === undefined) continue;\n      let type = tiddler.fields[this.typeField];\n      let text = tiddler.fields.text;\n      if (text === undefined) text = '';\n      let textFirstLine = text.match(/^.*/)[0];\n      let hint = tiddler.fields[this.hintField];\n      if (hint === undefined) hint = tiddler.fields[this.nameField];\n      if (hint === undefined) hint = '';\n      if (type === 'shortcut') {\n        let trigger = tiddler.fields[this.triggerField];\n        if (trigger === undefined) continue;\n        this.triggers.push({ trigger, text, hint });\n        continue;\n      }\n      if (!tiddler.fields[this.nameField] === undefined) continue;\n      let name = tiddler.fields[this.nameField];\n      if (type === 'prompt') {\n        let immediate = !!tiddler.fields[this.immediateField];\n        let caret = tiddler.fields[this.caretField];\n        let action = {\n          name: name,\n          action: () => this.promptCommand(textFirstLine, caret),\n          keepPalette: !immediate,\n          immediate: immediate\n        };\n        this.actions.push(action);\n        continue;\n      }\n      if (type === 'prompt-basic') {\n        let caret = tiddler.fields[this.caretField];\n        let action = {\n          name: name,\n          action: () => this.promptCommandBasic(textFirstLine, caret, hint),\n          keepPalette: true\n        };\n        let prefix = tiddler.fields[this.prefixField];\n        if (prefix !== undefined) {\n          this.symbolProviders[prefix] = {\n            provider: this.prefixedBasicProviderBuilder(\n              textFirstLine,\n              caret,\n              hint\n            ),\n            //resolver is set in provider after parsing the input without the prefix\n            resolver: undefined\n          };\n          this.prefixes.push({ prefix, hint });\n        }\n        this.actions.push(action);\n        continue;\n      }\n      if (type === 'message') {\n        this.actions.push({\n          name: name,\n          action: (e) => this.tmMessageBuilder(textFirstLine)(e)\n        });\n        continue;\n      }\n      if (type === 'actionString') {\n        let userInput =\n          tiddler.fields[this.userInputField] !== undefined &&\n          tiddler.fields[this.userInputField] === 'true';\n        if (userInput) {\n          this.actions.push({\n            name: name,\n            action: (e) => this.actionStringInput(text, hint, e),\n            keepPalette: true\n          });\n        } else {\n          this.actions.push({\n            name: name,\n            action: (e) => this.actionStringBuilder(text)(e)\n          });\n        }\n        continue;\n      }\n      if (type === 'history') {\n        let mode = tiddler.fields[this.modeField];\n        this.actions.push({\n          name: name,\n          action: (e) =>\n            this.commandWithHistoryPicker(textFirstLine, hint, mode).handler(e),\n          keepPalette: true\n        });\n        continue;\n      }\n    }\n  }\n\n  newCommandWizard() {\n    this.blockProviderChange = true;\n    this.searchContainer.value = '';\n    this.searchHint.innerText = 'Command Name';\n    let name = '';\n    let type = '';\n    let hint = '';\n\n    let messageStep = () => {\n      this.searchContainer.value = '';\n      this.searchHint.innerText = 'Enter Message';\n      this.currentResolver = (e) => {\n        this.tmMessageBuilder('tm-new-tiddler', {\n          title: '$:/' + name,\n          tags: this.customCommandsTag,\n          [this.typeField]: type,\n          [this.nameField]: name,\n          [this.hintField]: hint,\n          text: this.searchContainer.value\n        })(e);\n        this.closePalette();\n      };\n    };\n\n    let hintStep = () => {\n      this.searchContainer.value = '';\n      this.searchHint.innerText = 'Enter hint';\n      this.currentResolver = (e) => {\n        hint = this.searchContainer.value;\n        messageStep();\n      };\n    };\n\n    let typeStep = () => {\n      this.searchContainer.value = '';\n      this.searchHint.innerText =\n        'Enter type (prompt, prompt-basic, message, actionString, history)';\n      this.currentResolver = (e) => {\n        type = this.searchContainer.value;\n        if (type === 'history') {\n          hintStep();\n        } else {\n          this.tmMessageBuilder('tm-new-tiddler', {\n            title: '$:/' + name,\n            tags: this.customCommandsTag,\n            [this.typeField]: type,\n            [this.nameField]: name\n          })(e);\n          this.closePalette();\n        }\n      };\n    };\n\n    this.currentProvider = (terms) => {};\n    this.currentResolver = (e) => {\n      if (this.searchContainer.value.length === 0) return;\n      name = this.searchContainer.value;\n      typeStep();\n    };\n    this.showResults([]);\n  }\n\n  explorer(e) {\n    this.blockProviderChange = true;\n    this.searchContainer.value = '$:/';\n    this.lastExplorerInput = '$:/';\n    this.searchHint.innerText = 'Explorer';\n    this.currentProvider = (terms) => this.explorerProvider('$:/', terms);\n    this.currentResolver = (e) => {\n      if (this.currentSelection === 0) return;\n      this.currentResults[this.currentSelection - 1].result.action(e);\n    };\n    this.onInput();\n  }\n\n  explorerProvider(url, terms) {\n    let switchFolder = (url) => {\n      this.searchContainer.value = url;\n      this.lastExplorerInput = this.searchContainer.value;\n      this.currentProvider = (terms) => this.explorerProvider(url, terms);\n      this.onInput();\n    };\n    if (!this.searchContainer.value.startsWith(url)) {\n      this.searchContainer.value = this.lastExplorerInput;\n    }\n    this.lastExplorerInput = this.searchContainer.value;\n    this.currentSelection = 0;\n    let search = this.searchContainer.value.substr(url.length);\n    let tiddlers = $tw.wiki.filterTiddlers(\n      `[removeprefix[${url}]splitbefore[/]sort[]search[${search}]]`\n    );\n    let folders = [];\n    let files = [];\n    for (let tiddler of tiddlers) {\n      if (tiddler.endsWith('/')) {\n        folders.push({\n          name: tiddler,\n          action: (e) => switchFolder(`${url}${tiddler}`)\n        });\n      } else {\n        files.push({\n          name: tiddler,\n          action: (e) => {\n            this.navigateTo(`${url}${tiddler}`);\n            if (!e.getModifierState('Shift')) {\n              this.closePalette();\n            }\n          }\n        });\n      }\n    }\n    let topResult;\n    if (url !== '$:/') {\n      let splits = url.split('/');\n      splits.splice(splits.length - 2);\n      let parent = splits.join('/') + '/';\n      topResult = { name: '..', action: (e) => switchFolder(parent) };\n      this.showResults([topResult, ...folders, ...files]);\n      return;\n    }\n    this.showResults([...folders, ...files]);\n  }\n\n  setSetting(name, value) {\n    //doing the validation here too (it's also done in refreshSettings, so you can load you own settings with a json file)\n    if (typeof value === 'string') {\n      if (value === 'true') value = true;\n      if (value === 'false') value = false;\n    }\n    this.settings[name] = value;\n    $tw.wiki.setTiddlerData(this.settingsPath, this.settings);\n  }\n\n  //loadSettings?\n  refreshSettings() {\n    //get user or default settings\n    this.settings = $tw.wiki.getTiddlerData(this.settingsPath, {\n      ...this.defaultSettings\n    });\n    //Adding eventual missing properties to current user settings\n    for (let prop in this.defaultSettings) {\n      if (!this.defaultSettings.hasOwnProperty(prop)) continue;\n      if (this.settings[prop] === undefined) {\n        this.settings[prop] = this.defaultSettings[prop];\n      }\n    }\n    //cast all booleans\n    for (let prop in this.settings) {\n      if (!this.settings.hasOwnProperty(prop)) continue;\n      if (typeof this.settings[prop] !== 'string') continue;\n      if (this.settings[prop].toLowerCase() === 'true')\n        this.settings[prop] = true;\n      if (this.settings[prop].toLowerCase() === 'false')\n        this.settings[prop] = false;\n    }\n  }\n\n  render(parent, nextSibling) {\n    this.parentDomNode = parent;\n    this.execute();\n    this.history = $tw.wiki.getTiddlerData(this.commandHistoryPath, {\n      history: []\n    }).history;\n\n    $tw.rootWidget.addEventListener('open-command-palette', (e) =>\n      this.openPalette(e)\n    );\n    $tw.rootWidget.addEventListener('open-command-palette-selection', (e) =>\n      this.openPaletteSelection(e)\n    );\n    $tw.rootWidget.addEventListener('insert-command-palette-result', (e) =>\n      this.insertSelectedResult(e)\n    );\n\n    let inputAndMainHintWrapper = createElement('div', {\n      class: 'flex justify-center items-center p-2'\n    });\n    // pointer-events-none fix z-index bug\n    // backdrop-blur not effect with bg-neutral-600\n    this.mask = createElement('div', {\n      class:\n        'opacity-0 backdrop-blur-lg z-[9998] fixed inset-0 bg-black/20 transition-all pointer-events-none cursor-pointer'\n    });\n    this.container = createElement('div', {\n      class:\n        'hidden bg-white flex-col z-[9999] transform shadow-lg p-2 mt-4 fixed left-1/2 -translate-x-1/2 w-1/2 rounded transition-all dark:invert w-3/4 md:w-1/2'\n    });\n    // if add type: \"text\", google-chrome always tip\n    this.searchContainer = createElement('input', {\n      type: '',\n      class: 'w-full shadow-none border-none bg-transparent',\n      attributes: {\n        placeholder: '🔥 Search ...'\n      }\n    });\n    this.searchHint = createElement('div', {\n      class: 'commandpalettehint commandpalettehintmain'\n    });\n    inputAndMainHintWrapper.append(this.searchHint, this.searchContainer);\n    this.scrollDiv = createElement('div', {\n      class: 'cp-scroll'\n    });\n    this.container.append(inputAndMainHintWrapper, this.scrollDiv);\n    this.searchContainer.addEventListener('keydown', (e) => this.onKeyDown(e));\n    this.searchContainer.addEventListener('input', () =>\n      this.onInput(this.searchContainer.value)\n    );\n    window.addEventListener('click', (e) => this.onClick(e));\n\n    parent.insertBefore(this.mask, nextSibling);\n    parent.insertBefore(this.container, nextSibling);\n\n    this.refreshCommandPalette();\n\n    this.symbolProviders['>'] = {\n      provider: (terms) => this.actionProvider(terms),\n      resolver: (e) => this.actionResolver(e)\n    };\n    this.symbolProviders['#'] = {\n      provider: (terms) => this.tagListProvider(terms),\n      resolver: (e) => this.tagListResolver(e)\n    };\n    this.symbolProviders['@'] = {\n      provider: (terms) => this.tagProvider(terms),\n      resolver: (e) => this.defaultResolver(e)\n    };\n    this.symbolProviders['?'] = {\n      provider: (terms) => this.helpProvider(terms),\n      resolver: (e) => this.helpResolver(e)\n    };\n    this.symbolProviders['['] = {\n      provider: (terms, hint) => this.filterProvider(terms, hint),\n      resolver: (e) => this.filterResolver(e)\n    };\n    this.symbolProviders['+'] = {\n      provider: (terms) => this.createTiddlerProvider(terms),\n      resolver: (e) => this.createTiddlerResolver()\n    };\n    this.symbolProviders['|'] = {\n      provider: (terms) => this.settingsProvider(terms),\n      resolver: (e) => this.settingsResolver()\n    };\n    this.currentResults = [];\n    this.currentProvider = {};\n  }\n\n  refreshSearchSteps() {\n    this.searchSteps = [];\n    let steps = $tw.wiki.getTiddlerData(this.searchStepsPath);\n    steps = steps.steps;\n    for (let step of steps) {\n      this.searchSteps.push(\n        this.searchStepBuilder(step.filter, step.caret, step.hint)\n      );\n    }\n  }\n\n  refreshCommandPalette() {\n    this.refreshSettings();\n    this.refreshThemes();\n    this.refreshCommands();\n    this.refreshSearchSteps();\n  }\n\n  updateCommandHistory(command) {\n    this.history = Array.from(new Set([command.name, ...this.history]));\n    $tw.wiki.setTiddlerData(this.commandHistoryPath, {\n      history: this.history\n    });\n  }\n\n  historyProviderBuilder(hint, mode) {\n    return (terms) => {\n      this.currentSelection = 0;\n      this.searchHint.innerText = hint;\n      let results;\n      if (mode !== undefined && mode === 'drafts') {\n        results = $tw.wiki.filterTiddlers('[has:field[draft.of]]');\n      } else if (mode !== undefined && mode === 'story') {\n        results = $tw.wiki.filterTiddlers('[list[$:/StoryList]]');\n      } else {\n        results = this.getHistory();\n      }\n      results = results.map((r) => {\n        return { name: r };\n      });\n      this.showResults(results);\n    };\n  }\n\n  commandWithHistoryPicker(message, hint, mode) {\n    let handler = (e) => {\n      this.blockProviderChange = true;\n      this.allowInputFieldSelection = true;\n      this.currentProvider = provider;\n      this.currentResolver = resolver;\n      this.searchContainer.value = '';\n      this.onInput(this.searchContainer.value);\n    };\n    let provider = this.historyProviderBuilder(hint, mode);\n    let resolver = (e) => {\n      if (this.currentSelection === 0) return;\n      let title = this.currentResults[this.currentSelection - 1].result.name;\n      this.parentWidget.dispatchEvent({\n        type: message,\n        param: title,\n        tiddlerTitle: title\n      });\n      this.closePalette();\n    };\n    return {\n      handler,\n      provider,\n      resolver\n    };\n  }\n  onInput(text) {\n    if (this.blockProviderChange) {\n      //prevent provider changes\n      this.currentProvider(text);\n      this.setSelectionToFirst();\n      return;\n    }\n    let { resolver, provider, terms } = this.parseCommand(text);\n    this.currentResolver = resolver;\n    this.currentProvider = provider;\n    this.currentProvider(terms);\n    this.setSelectionToFirst();\n  }\n  parseCommand(text) {\n    let terms = '';\n    let resolver;\n    let provider;\n    let shortcut = this.triggers.find((t) => text.startsWith(t.trigger));\n    if (shortcut !== undefined) {\n      resolver = (e) => {\n        let inputWithoutShortcut = this.searchContainer.value.substr(\n          shortcut.trigger.length\n        );\n        this.invokeActionString(shortcut.text, this, e, {\n          commandpaletteinput: inputWithoutShortcut\n        });\n        this.closePalette();\n      };\n      provider = (terms) => {\n        this.searchHint.innerText = shortcut.hint;\n        this.showResults([]);\n      };\n    } else {\n      let providerSymbol = undefined;\n      for (let prefix in this.symbolProviders) {\n        if (\n          text.startsWith(prefix) &&\n          (providerSymbol === undefined ||\n            providerSymbol.length < prefix.length)\n        ) {\n          providerSymbol = prefix;\n        }\n      }\n      if (providerSymbol === undefined) {\n        resolver = this.defaultResolver;\n        provider = this.defaultProvider;\n        terms = text;\n      } else {\n        provider = this.symbolProviders[providerSymbol].provider;\n        resolver = this.symbolProviders[providerSymbol].resolver;\n        terms = text.substring(providerSymbol.length);\n      }\n    }\n    return { resolver, provider, terms };\n  }\n  onClick(e) {\n    if (this.isOpened && !this.container.contains(e.target)) {\n      this.closePalette();\n    }\n  }\n  openPaletteSelection(e) {\n    let selection = getCurrentSelection();\n    e.param = selection;\n    this.openPalette(e);\n  }\n  openPalette(e) {\n    this.isOpened = true;\n    this.allowInputFieldSelection = false;\n    this.goBack = undefined;\n    this.blockProviderChange = false;\n    let activeElement = getActiveElement();\n    this.previouslyFocused = {\n      element: activeElement,\n      start: activeElement.selectionStart,\n      end: activeElement.selectionEnd,\n      caretPos: activeElement.selectionEnd\n    };\n    this.searchContainer.value = '';\n    if (e.param !== undefined) {\n      this.searchContainer.value = e.param;\n    }\n    if (this.settings.alwaysPassSelection) {\n      this.searchContainer.value += getCurrentSelection();\n    }\n    this.currentSelection = 0;\n    this.onInput(this.searchContainer.value); //Trigger results on open\n    /** dynamic start*/\n    this.container.classList.add('flex');\n    this.container.classList.remove('hidden');\n    this.mask.classList.remove('pointer-events-none');\n    this.mask.classList.add('opacity-100');\n    /** dynamic end */\n    this.mask.addEventListener('scroll', (e) => e.stopPropagation());\n    // 打开命令面板时，禁用滚动\n    document.body.style.overflow = 'hidden';\n    // this.container.classList.add('translate-y-40')\n    this.searchContainer.focus();\n  }\n\n  insertSelectedResult() {\n    if (!this.isOpened) return;\n    if (this.currentSelection === 0) return; //TODO: what to do here?\n    let previous = this.previouslyFocused;\n    let previousValue = previous.element.value;\n    if (previousValue === undefined) return;\n    let selection = this.currentResults[this.currentSelection - 1].result.name;\n    if (previous.start !== previous.end) {\n      this.previouslyFocused.element.value =\n        previousValue.substring(0, previous.start) +\n        selection +\n        previousValue.substring(previous.end);\n    } else {\n      this.previouslyFocused.element.value =\n        previousValue.substring(0, previous.start) +\n        selection +\n        previousValue.substring(previous.start);\n    }\n    this.previouslyFocused.caretPos = previous.start + selection.length;\n    this.closePalette();\n  }\n\n  closePalette() {\n    this.mask.classList.remove('opacity-100');\n    this.mask.classList.add('pointer-events-none');\n    this.container.classList.remove('flex');\n    this.container.classList.add('hidden');\n\n    this.isOpened = false;\n    focusAtCaretPosition(\n      this.previouslyFocused.element,\n      this.previouslyFocused.caretPos\n    );\n\n    // 打开命令面板时，启用滚动\n    document.body.style.overflow = 'auto';\n  }\n  onKeyDown(e) {\n    if (e.key === 'Escape') {\n      //\t\t\t\t\t\t\t\t\t\\/ There's no previous state\n      if (!this.settings.escapeGoesBack || this.goBack === undefined) {\n        this.closePalette();\n      } else {\n        this.goBack();\n        this.goBack = undefined;\n      }\n    } else if (e.key === 'ArrowUp') {\n      e.preventDefault();\n      e.stopPropagation();\n      let sel = this.currentSelection - 1;\n\n      if (sel === 0) {\n        if (!this.allowInputFieldSelection) {\n          sel = this.currentResults.length;\n        }\n      } else if (sel < 0) {\n        sel = this.currentResults.length;\n      }\n      this.setSelection(sel);\n    } else if (e.key === 'ArrowDown') {\n      e.preventDefault();\n      e.stopPropagation();\n      let sel = (this.currentSelection + 1) % (this.currentResults.length + 1);\n      if (\n        !this.allowInputFieldSelection &&\n        sel === 0 &&\n        this.currentResults.length !== 0\n      ) {\n        sel = 1;\n      }\n      this.setSelection(sel);\n    } else if (e.key === 'Enter') {\n      e.preventDefault();\n      e.stopPropagation();\n      this.validateSelection(e);\n    }\n  }\n  addResult(result, id) {\n    let resultDiv = createElement('div', {\n      class: 'commandpaletteresult py-2 rounded',\n      text: result.name\n    });\n    if (result.hint !== undefined) {\n      let hint = createElement('div', {\n        class: 'commandpalettehint text-neutral-600',\n        text: result.hint\n      });\n      resultDiv.append(hint);\n    }\n    resultDiv.result = result;\n    this.currentResults.push(resultDiv);\n    resultDiv.addEventListener('click', (e) => {\n      this.setSelection(id + 1);\n      this.validateSelection(e);\n    });\n    this.scrollDiv.append(resultDiv);\n  }\n  validateSelection(e) {\n    this.currentResolver(e);\n  }\n  defaultResolver(e) {\n    if (e.getModifierState('Shift')) {\n      this.searchContainer.value = '+' + this.searchContainer.value; //this resolver expects that the input starts with +\n      this.createTiddlerResolver(e);\n      return;\n    }\n    if (this.currentSelection === 0) return;\n    let selectionTitle =\n      this.currentResults[this.currentSelection - 1].result.name;\n    this.closePalette();\n    this.navigateTo(selectionTitle);\n  }\n  navigateTo(title) {\n    this.parentWidget.dispatchEvent({\n      type: 'tm-navigate',\n      param: title,\n      navigateTo: title\n    });\n  }\n\n  showHistory() {\n    this.searchHint.innerText = 'History';\n    this.currentProvider = (terms) => {\n      let results;\n      if (terms.length === 0) {\n        results = this.getHistory();\n      } else {\n        results = this.getHistory().filter((h) => h.includes(terms));\n      }\n      results = results.map((r) => {\n        return {\n          name: r,\n          action: () => {\n            this.navigateTo(r);\n            this.closePalette();\n          }\n        };\n      });\n      this.showResults(results);\n    };\n    this.currentResolver = (e) => {\n      if (this.currentSelection === 0) return;\n      this.currentResults[this.currentSelection - 1].result.action(e);\n    };\n    this.searchContainer.value = '';\n    this.blockProviderChange = true;\n    this.onInput(this.searchContainer.value);\n  }\n\n  setSelectionToFirst() {\n    let sel = 1;\n    if (this.allowInputFieldSelection || this.currentResults.length === 0) {\n      sel = 0;\n    }\n    this.setSelection(sel);\n  }\n\n  setSelection(id) {\n    this.currentSelection = id;\n    for (let i = 0; i < this.currentResults.length; i++) {\n      let selected = this.currentSelection === i + 1;\n      this.currentResults[i].className = selected\n        ? 'commandpaletteresult commandpaletteresultselected py-2 bg-neutral-200 text-neutral-900 rounded-sm'\n        : 'commandpaletteresult py-2 dark:invert';\n    }\n    if (this.currentSelection === 0) {\n      this.scrollDiv.scrollTop = 0;\n      return;\n    }\n    let scrollHeight = this.scrollDiv.offsetHeight;\n    let scrollPos = this.scrollDiv.scrollTop;\n    let selectionPos = this.currentResults[this.currentSelection - 1].offsetTop;\n    let selectionHeight =\n      this.currentResults[this.currentSelection - 1].offsetHeight;\n\n    if (selectionPos < scrollPos || selectionPos >= scrollPos + scrollHeight) {\n      //select the closest scrolling position showing the selection\n      let a = selectionPos;\n      let b = selectionPos - scrollHeight + selectionHeight;\n      a = Math.abs(a - scrollPos);\n      b = Math.abs(b - scrollPos);\n      if (a < b) {\n        this.scrollDiv.scrollTop = selectionPos;\n      } else {\n        this.scrollDiv.scrollTop =\n          selectionPos - scrollHeight + selectionHeight;\n      }\n    }\n  }\n\n  getHistory() {\n    let history = $tw.wiki.getTiddlerData('$:/HistoryList');\n    if (history === undefined) {\n      history = [];\n    }\n    history = [\n      ...history.reverse().map((x) => x.title),\n      ...$tw.wiki.filterTiddlers('[list[$:/StoryList]]')\n    ];\n    return Array.from(\n      new Set(history.filter((t) => this.tiddlerOrShadowExists(t)))\n    );\n  }\n\n  tiddlerOrShadowExists(title) {\n    return $tw.wiki.tiddlerExists(title) || $tw.wiki.isShadowTiddler(title);\n  }\n\n  defaultProvider(terms) {\n    this.searchHint.innerText = '🔍';\n    this.searchHint.className = 'mr-2';\n    let searches;\n    if (terms.startsWith('\\\\')) terms = terms.substr(1);\n    if (terms.length === 0) {\n      if (this.settings.showHistoryOnOpen) {\n        searches = this.getHistory().map((s) => {\n          return { name: s, hint: 'history' };\n        });\n      } else {\n        searches = [];\n      }\n    } else {\n      searches = this.searchSteps.reduce((a, c) => [...a, ...c(terms)], []);\n      searches = Array.from(new Set(searches));\n    }\n    this.showResults(searches);\n  }\n\n  searchStepBuilder(filter, caret, hint) {\n    return (terms) => {\n      let search = filter.substr(0, caret) + terms + filter.substr(caret);\n      let results = $tw.wiki.filterTiddlers(search).map((s) => {\n        return { name: s, hint: hint };\n      });\n      return results;\n    };\n  }\n\n  tagListProvider(terms) {\n    this.currentSelection = 0;\n    this.searchHint.innerText = 'Search tags';\n    let searches;\n    if (terms.length === 0) {\n      searches = $tw.wiki.filterTiddlers(\n        '[!is[system]tags[]][is[system]tags[]][all[shadows]tags[]]'\n      );\n    } else {\n      searches = $tw.wiki.filterTiddlers(\n        '[all[]tags[]!is[system]search[' +\n          terms +\n          ']][all[]tags[]is[system]search[' +\n          terms +\n          ']][all[shadows]tags[]search[' +\n          terms +\n          ']]'\n      );\n    }\n    searches = searches.map((s) => {\n      return { name: s };\n    });\n    this.showResults(searches);\n  }\n  tagListResolver(e) {\n    if (this.currentSelection === 0) {\n      let input = this.searchContainer.value.substr(1);\n      let exist = $tw.wiki.filterTiddlers('[tag[' + input + ']]');\n      if (!exist) return;\n      this.searchContainer.value = '@' + input;\n      return;\n    }\n    let result = this.currentResults[this.currentSelection - 1];\n    this.searchContainer.value = '@' + result.innerText;\n    this.onInput(this.searchContainer.value);\n  }\n  tagProvider(terms) {\n    this.currentSelection = 0;\n    this.searchHint.innerText = 'Search tiddlers with @tag(s)';\n    let searches = [];\n    if (terms.length !== 0) {\n      let { tags, searchTerms, tagsFilter } = this.parseTags(\n        this.searchContainer.value\n      );\n      let taggedTiddlers = $tw.wiki.filterTiddlers(tagsFilter);\n\n      if (taggedTiddlers.length !== 0) {\n        if (tags.length === 1) {\n          let tag = tags[0];\n          let tagTiddlerExists = this.tiddlerOrShadowExists(tag);\n          if (tagTiddlerExists && searchTerms.some((s) => tag.includes(s)))\n            searches.push(tag);\n        }\n        searches = [...searches, ...taggedTiddlers];\n      }\n    }\n    searches = searches.map((s) => {\n      return { name: s };\n    });\n    this.showResults(searches);\n  }\n\n  parseTags(input) {\n    let splits = input.split(' ').filter((s) => s !== '');\n    let tags = [];\n    let searchTerms = [];\n    for (let i = 0; i < splits.length; i++) {\n      if (splits[i].startsWith('@')) {\n        tags.push(splits[i].substr(1));\n        continue;\n      }\n      searchTerms.push(splits[i]);\n    }\n    let tagsFilter = `[all[tiddlers+system+shadows]${tags.reduce((a, c) => {\n      return a + 'tag[' + c + ']';\n    }, '')}]`;\n    if (searchTerms.length !== 0) {\n      tagsFilter = tagsFilter.substr(0, tagsFilter.length - 1); //remove last ']'\n      tagsFilter += `search[${searchTerms.join(' ')}]]`;\n    }\n    return { tags, searchTerms, tagsFilter };\n  }\n\n  settingsProvider(terms) {\n    this.currentSelection = 0;\n    this.searchHint.innerText = 'Select the setting you want to change';\n    let isNumerical = (terms) =>\n      terms.length !== 0 && terms.match(/\\D/gm) === null;\n    let isBoolean = (terms) =>\n      terms.length !== 0 && terms.match(/(true\\b)|(false\\b)/gim) !== null;\n    this.showResults([\n      {\n        name: 'Theme (currently ' + this.settings.theme.match(/[^\\/]*$/) + ')',\n        action: () => this.promptForThemeSetting()\n      },\n      this.settingResultBuilder(\n        'Max results',\n        'maxResults',\n        'Choose the maximum number of results',\n        isNumerical,\n        'Error: value must be a positive integer'\n      ),\n      this.settingResultBuilder(\n        'Show history on open',\n        'showHistoryOnOpen',\n        'Chose whether to show the history when you open the palette',\n        isBoolean,\n        \"Error: value must be 'true' or 'false'\"\n      ),\n      this.settingResultBuilder(\n        'Escape to go back',\n        'escapeGoesBack',\n        'Chose whether ESC should go back when possible',\n        isBoolean,\n        \"Error: value must be 'true' or 'false'\"\n      ),\n      this.settingResultBuilder(\n        'Use selection as search query',\n        'alwaysPassSelection',\n        'Chose your current selection is passed to the command palette',\n        isBoolean,\n        \"Error: value must be 'true' or 'false'\"\n      ),\n      this.settingResultBuilder(\n        'Never Basic',\n        'neverBasic',\n        'Chose whether to override basic prompts to show filter operation',\n        isBoolean,\n        \"Error: value must be 'true' or 'false'\"\n      ),\n      this.settingResultBuilder(\n        'Field preview max size',\n        'maxResultHintSize',\n        'Choose the maximum hint length for field preview',\n        isNumerical,\n        'Error: value must be a positive integer'\n      )\n    ]);\n  }\n\n  settingResultBuilder(name, settingName, hint, validator, errorMsg) {\n    return {\n      name: name + ' (currently ' + this.settings[settingName] + ')',\n      action: () =>\n        this.promptForSetting(settingName, hint, validator, errorMsg)\n    };\n  }\n\n  settingsResolver(e) {\n    if (this.currentSelection === 0) return;\n    this.goBack = () => {\n      this.searchContainer.value = '|';\n      this.blockProviderChange = false;\n      this.onInput(this.searchContainer.value);\n    };\n    this.currentResults[this.currentSelection - 1].result.action();\n  }\n\n  promptForThemeSetting() {\n    this.blockProviderChange = true;\n    this.allowInputFieldSelection = false;\n    this.currentProvider = (terms) => {\n      this.currentSelection = 0;\n      this.searchHint.innerText = 'Choose a theme';\n      let defaultValue = this.defaultSettings['theme'];\n      let results = [\n        {\n          name: 'Revert to default value: ' + defaultValue.match(/[^\\/]*$/),\n          action: () => {\n            this.setSetting('theme', defaultValue);\n            this.refreshThemes();\n          }\n        }\n      ];\n      for (let theme of this.themes) {\n        let name = theme.fields.title;\n        let shortName = name.match(/[^\\/]*$/);\n        let action = () => {\n          this.setSetting('theme', name);\n          this.refreshThemes();\n        };\n        results.push({ name: shortName, action: action });\n      }\n      this.showResults(results);\n    };\n    this.currentResolver = (e) => {\n      this.currentResults[this.currentSelection - 1].result.action(e);\n    };\n    this.searchContainer.value = '';\n    this.onInput(this.searchContainer.value);\n  }\n\n  //Validator = (terms) => bool\n  promptForSetting(settingName, hint, validator, errorMsg) {\n    this.blockProviderChange = true;\n    this.allowInputFieldSelection = true;\n    this.currentProvider = (terms) => {\n      this.currentSelection = 0;\n      this.searchHint.innerText = hint;\n      let defaultValue = this.defaultSettings[settingName];\n      let results = [\n        {\n          name: 'Revert to default value: ' + defaultValue,\n          action: () => this.setSetting(settingName, defaultValue)\n        }\n      ];\n      if (!validator(terms)) {\n        results.push({ name: errorMsg });\n      }\n      this.showResults(results);\n    };\n    this.currentResolver = (e) => {\n      if (this.currentSelection === 0) {\n        let input = this.searchContainer.value;\n        if (validator(input)) {\n          this.setSetting(settingName, input);\n          this.goBack = undefined;\n          this.blockProviderChange = false;\n          this.allowInputFieldSelection = false;\n          this.promptCommand('|');\n        }\n      } else {\n        let action =\n          this.currentResults[this.currentSelection - 1].result.action;\n        if (action) {\n          action();\n          this.goBack = undefined;\n          this.blockProviderChange = false;\n          this.allowInputFieldSelection = false;\n          this.promptCommand('|');\n        }\n      }\n    };\n    this.searchContainer.value = this.settings[settingName];\n    this.onInput(this.searchContainer.value);\n  }\n\n  showResults(results) {\n    for (let cur of this.currentResults) {\n      cur.remove();\n    }\n    this.currentResults = [];\n    let resultCount = 0;\n    for (let result of results) {\n      this.addResult(result, resultCount);\n      resultCount++;\n      if (resultCount >= this.settings.maxResults) break;\n    }\n  }\n\n  tmMessageBuilder(message, params = {}) {\n    return (e) => {\n      let event = {\n        type: message,\n        paramObject: params,\n        event: e\n      };\n      this.parentWidget.dispatchEvent(event);\n    };\n  }\n  actionProvider(terms) {\n    this.currentSelection = 0;\n    this.searchHint.innerText = '💻';\n    let results;\n    if (terms.length === 0) {\n      results = this.getCommandHistory();\n    } else {\n      results = this.actions.filter((a) =>\n        a.name.toLowerCase().includes(terms.toLowerCase())\n      );\n    }\n    this.showResults(results);\n  }\n\n  helpProvider(terms) {\n    //TODO: tiddlerify?\n    this.currentSelection = 0;\n    this.searchHint.innerText = '🐚';\n    let searches = [\n      { name: '... Search', action: () => this.promptCommand('') },\n      { name: '> Commands', action: () => this.promptCommand('>') },\n      {\n        name: '+ Create tiddler with title',\n        action: () => this.promptCommand('+')\n      },\n      { name: '# Search tags', action: () => this.promptCommand('#') },\n      {\n        name: '@ List tiddlers with tag',\n        action: () => this.promptCommand('@')\n      },\n      { name: '[ Filter operation', action: () => this.promptCommand('[') },\n      {\n        name: '| Command Palette Settings',\n        action: () => this.promptCommand('|')\n      },\n      {\n        name: '\\\\ Escape first character',\n        action: () => this.promptCommand('\\\\')\n      },\n      { name: '? Help', action: () => this.promptCommand('?') }\n    ];\n    this.prefixes.forEach((p) =>\n      searches.push({\n        name: p.prefix + ' ' + p.hint,\n        action: () => this.promptCommand(p.prefix)\n      })\n    );\n    this.showResults(searches);\n  }\n\n  filterProvider(terms, hint) {\n    this.currentSelection = 0;\n    this.searchHint.innerText = hint === undefined ? 'Filter operation' : hint;\n    terms = '[' + terms;\n    let fields = $tw.wiki.filterTiddlers('[fields[]]');\n    let results = $tw.wiki.filterTiddlers(terms).map((r) => {\n      return { name: r };\n    });\n    let insertResult = (i, result) => results.splice(i + 1, 0, result);\n    for (let i = 0; i < results.length; i++) {\n      let initialResult = results[i];\n      let alreadyMatched = false;\n      let date = 'Invalid Date';\n      if (initialResult.name.length === 17) {\n        //to be sure to only match tiddly dates (17 char long)\n        date = $tw.utils.parseDate(initialResult.name).toLocaleString();\n      }\n      if (date !== 'Invalid Date') {\n        results[i].hint = date;\n        results[i].action = () => {};\n        alreadyMatched = true;\n      }\n      let isTag = $tw.wiki.getTiddlersWithTag(initialResult.name).length !== 0;\n      if (isTag) {\n        if (alreadyMatched) {\n          insertResult(i, { ...results[i] });\n          i += 1;\n        }\n        results[i].action = () => this.promptCommand('@' + initialResult.name);\n        results[i].hint = 'Tag'; //Todo more info?\n        alreadyMatched = true;\n      }\n      let isTiddler = this.tiddlerOrShadowExists(initialResult.name);\n      if (isTiddler) {\n        if (alreadyMatched) {\n          insertResult(i, { ...results[i] });\n          i += 1;\n        }\n        results[i].action = () => {\n          this.navigateTo(initialResult.name);\n          this.closePalette();\n        };\n        results[i].hint = 'Tiddler';\n        alreadyMatched = true;\n      }\n      let isField = fields.includes(initialResult.name);\n      if (isField) {\n        if (alreadyMatched) {\n          insertResult(i, { ...results[i] });\n          i += 1;\n        }\n        let parsed;\n        try {\n          parsed = $tw.wiki.parseFilter(this.searchContainer.value);\n        } catch (e) {} //The error is already displayed to the user\n        let foundTitles = [];\n        for (let node of parsed || []) {\n          if (node.operators.length !== 2) continue;\n          if (\n            node.operators[0].operator === 'title' &&\n            node.operators[1].operator === 'fields'\n          ) {\n            foundTitles.push(node.operators[0].operand);\n          }\n        }\n        let hint = 'Field';\n        if (foundTitles.length === 1) {\n          hint = $tw.wiki.getTiddler(foundTitles[0]).fields[initialResult.name];\n          if (hint instanceof Date) {\n            hint = hint.toLocaleString();\n          }\n          hint = hint.toString().replace(/(\\r\\n|\\n|\\r)/gm, '');\n          let maxSize = this.settings.maxResultHintSize - 3;\n          if (hint.length > maxSize) {\n            hint = hint.substring(0, maxSize);\n            hint += '...';\n          }\n        }\n        results[i].hint = hint;\n        results[i].action = () => {};\n        alreadyMatched = true;\n      }\n      // let isContentType = terms.includes('content-type');\n    }\n    this.showResults(results);\n  }\n\n  filterResolver(e) {\n    if (this.currentSelection === 0) return;\n    this.currentResults[this.currentSelection - 1].result.action();\n    e.stopPropagation();\n  }\n\n  helpResolver(e) {\n    if (this.currentSelection === 0) return;\n    this.currentResults[this.currentSelection - 1].result.action();\n    e.stopPropagation();\n  }\n\n  createTiddlerProvider(terms) {\n    this.currentSelection = 0;\n    this.searchHint.innerText = '🟦';\n    this.showResults([]);\n  }\n\n  createTiddlerResolver(e) {\n    let { tags, searchTerms } = this.parseTags(\n      this.searchContainer.value.substr(1)\n    );\n    let title = searchTerms.join(' ');\n    tags = tags.join(' ');\n    this.tmMessageBuilder('tm-new-tiddler', { title: title, tags: tags })(e);\n    this.closePalette();\n  }\n\n  promptCommand(value, caret) {\n    this.blockProviderChange = false;\n    this.searchContainer.value = value;\n    this.searchContainer.focus();\n    if (caret !== undefined) {\n      this.searchContainer.setSelectionRange(caret, caret);\n    }\n    this.onInput(this.searchContainer.value);\n  }\n\n  promptCommandBasic(value, caret, hint) {\n    if (\n      this.settings.neverBasic === 'true' ||\n      this.settings.neverBasic === true\n    ) {\n      //TODO: validate settings to avoid unnecessary checks\n      this.promptCommand(value, caret);\n      return;\n    }\n    this.searchContainer.value = '';\n    this.blockProviderChange = true;\n    this.currentProvider = this.basicProviderBuilder(value, caret, hint);\n    this.onInput(this.searchContainer.value);\n  }\n\n  basicProviderBuilder(value, caret, hint) {\n    let start = value.substr(0, caret);\n    let end = value.substr(caret);\n    return (input) => {\n      let { resolver, provider, terms } = this.parseCommand(\n        start + input + end\n      );\n      let backgroundProvider = provider;\n      backgroundProvider(terms, hint);\n      this.currentResolver = resolver;\n    };\n  }\n\n  prefixedBasicProviderBuilder(value, caret, hint, prefixLength) {\n    let start = value.substr(0, caret);\n    let end = value.substr(caret);\n    return (input) => {\n      input = input.substring(prefixLength);\n      let { resolver, provider, terms } = this.parseCommand(\n        start + input + end\n      );\n      let backgroundProvider = provider;\n      backgroundProvider(terms, hint);\n      this.currentResolver = resolver;\n    };\n  }\n\n  getCommandHistory() {\n    this.history = this.history.filter((h) =>\n      this.actions.some((a) => a.name === h)\n    ); //get rid of deleted command that are still in history;\n    let results = this.history.map((h) =>\n      this.actions.find((a) => a.name === h)\n    );\n    while (results.length <= this.settings.maxResults) {\n      let nextDefaultAction = this.actions.find((a) => !results.includes(a));\n      if (nextDefaultAction === undefined) break;\n      results.push(nextDefaultAction);\n    }\n    return results;\n  }\n  actionResolver(e) {\n    if (this.currentSelection === 0) return;\n    let result = this.actions.find(\n      (a) => a.name === this.currentResults[this.currentSelection - 1].innerText\n    );\n    if (result.keepPalette) {\n      let curInput = this.searchContainer.value;\n      this.goBack = () => {\n        this.searchContainer.value = curInput;\n        this.blockProviderChange = false;\n        this.onInput(this.searchContainer.value);\n      };\n    }\n    this.updateCommandHistory(result);\n    result.action(e);\n    e.stopPropagation();\n    if (result.immediate) {\n      this.validateSelection(e);\n      return;\n    }\n    if (!result.keepPalette) {\n      this.closePalette();\n    }\n  }\n\n  /*\n      Selectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n      */\n  refresh() {\n    return false;\n  }\n}\n\nexports.commandpalettewidget = CommandPaletteWidget;\n","type":"application/javascript","module-type":"widget"},"$:/plugins/oeyoews/commandpalette/Browser Refresh":{"title":"$:/plugins/oeyoews/commandpalette/Browser Refresh","command-palette-name":"Browser Refresh","command-palette-type":"message","tags":"$:/tags/CommandPaletteCommand","text":"tm-browser-refresh\n"},"$:/plugins/oeyoews/commandpalette/Cancel Tiddler":{"title":"$:/plugins/oeyoews/commandpalette/Cancel Tiddler","command-palette-hint":"Choose Draft to cancel","command-palette-mode":"drafts","command-palette-name":"Cancel Tiddler","command-palette-type":"history","tags":"$:/tags/CommandPaletteCommand","text":"tm-cancel-tiddler\n"},"$:/plugins/oeyoews/commandpalette/Clone Tiddler":{"title":"$:/plugins/oeyoews/commandpalette/Clone Tiddler","command-palette-hint":"Chose tiddler to clone","command-palette-name":"Clone Tiddler","command-palette-type":"history","tags":"$:/tags/CommandPaletteCommand","text":"tm-new-tiddler\n"},"$:/plugins/oeyoews/commandpalette/Close All Tiddlers":{"title":"$:/plugins/oeyoews/commandpalette/Close All Tiddlers","command-palette-name":"Close All Tiddlers","command-palette-type":"message","tags":"$:/tags/CommandPaletteCommand","text":"tm-close-all-tiddlers\n"},"$:/plugins/oeyoews/commandpalette/Close Tiddler":{"title":"$:/plugins/oeyoews/commandpalette/Close Tiddler","command-palette-hint":"Choose tiddler to close","command-palette-name":"Close Tiddler","command-palette-type":"history","tags":"$:/tags/CommandPaletteCommand","text":"tm-close-tiddler\n"},"$:/plugins/oeyoews/commandpalette/Close other Tiddlers":{"title":"$:/plugins/oeyoews/commandpalette/Close other Tiddlers","command-palette-hint":"Choose tiddler to keep","command-palette-name":"Close other Tiddlers","command-palette-type":"history","tags":"$:/tags/CommandPaletteCommand","text":"tm-close-other-tiddlers\n"},"$:/plugins/oeyoews/commandpalette/CommandPaletteCommandMode":{"title":"$:/plugins/oeyoews/commandpalette/CommandPaletteCommandMode","key":"((open-command-palette-command-mode))","tags":"$:/tags/KeyboardShortcut","text":"<$action-sendmessage $message=\"open-command-palette\" $param=\">\"/>"},"$:/plugins/oeyoews/commandpalette/CommandPaletteSelection":{"title":"$:/plugins/oeyoews/commandpalette/CommandPaletteSelection","key":"((open-command-palette-selection))","tags":"$:/tags/KeyboardShortcut","text":"<$action-sendmessage $message=\"open-command-palette-selection\"/>"},"$:/plugins/oeyoews/commandpalette/Command Palette Settings":{"title":"$:/plugins/oeyoews/commandpalette/Command Palette Settings","command-palette-name":"Command Palette Settings","command-palette-type":"prompt","tags":"$:/tags/CommandPaletteCommand","text":"|\n"},"$:/plugins/oeyoews/commandpalette/Edit Tiddler":{"title":"$:/plugins/oeyoews/commandpalette/Edit Tiddler","command-palette-hint":"Choose tiddler to edit","command-palette-name":"Edit Tiddler","command-palette-type":"history","tags":"$:/tags/CommandPaletteCommand","text":"tm-edit-tiddler\n"},"$:/plugins/oeyoews/commandpalette/InsertCommandPaletteResult":{"title":"$:/plugins/oeyoews/commandpalette/InsertCommandPaletteResult","key":"((insert-command-palette-result))","tags":"$:/tags/KeyboardShortcut","text":"<$action-sendmessage $message=\"insert-command-palette-result\"/>"},"$:/core/ui/KeyboardShortcuts/CommandPalette":{"title":"$:/core/ui/KeyboardShortcuts/CommandPalette","key":"((open-command-palette))","tags":"$:/tags/KeyboardShortcut","text":"<$action-sendmessage $message=\"open-command-palette\"/>"},"$:/plugins/oeyoews/commandpalette/Save Wiki":{"title":"$:/plugins/oeyoews/commandpalette/Save Wiki","command-palette-name":"Save Wiki","command-palette-type":"message","tags":"$:/tags/CommandPaletteCommand","text":"tm-save-wiki\n"},"$:/plugins/oeyoews/commandpalette/See Story List":{"title":"$:/plugins/oeyoews/commandpalette/See Story List","command-palette-caret":"26","command-palette-name":"See Story List","command-palette-type":"prompt-basic","tags":"$:/tags/CommandPaletteCommand","text":"[list[$:/StoryList]search[]]"},"$:/plugins/oeyoews/commandpalette/See Themes":{"title":"$:/plugins/oeyoews/commandpalette/See Themes","command-palette-caret":"40","command-palette-name":"See Themes","command-palette-type":"prompt-basic","tags":"$:/tags/CommandPaletteCommand","text":"[!has[draft.of]plugin-type[theme]search[]]\n"},"$:/plugins/oeyoews/commandpalette/See untagged tiddlers":{"title":"$:/plugins/oeyoews/commandpalette/See untagged tiddlers","command-palette-caret":"29","command-palette-name":"See untagged Tiddlers","command-palette-type":"prompt-basic","tags":"$:/tags/CommandPaletteCommand","text":"[untagged[]!is[system]search[]]\n"},"$:/plugins/oeyoews/commandpalette/Show help":{"title":"$:/plugins/oeyoews/commandpalette/Show help","command-palette-name":"Show help","command-palette-type":"prompt","tags":"$:/tags/CommandPaletteCommand","text":"?\n"},"$:/plugins/oeyoews/commandpalette/Toggle Fullscreen":{"title":"$:/plugins/oeyoews/commandpalette/Toggle Fullscreen","command-palette-name":"Toggle Fullscreen","command-palette-type":"message","tags":"$:/tags/CommandPaletteCommand","text":"tm-full-screen\n"},"$:/plugins/oeyoews/commandpalette/Unfold All Tiddlers":{"title":"$:/plugins/oeyoews/commandpalette/Unfold All Tiddlers","command-palette-name":"Unfold All Tiddlers","command-palette-type":"actionString","tags":"$:/tags/CommandPaletteCommand","text":"<$action-sendmessage $message=\"tm-unfold-all-tiddlers\" foldedStatePrefix=\"$:/state/folded/\"/>\n"},"$:/plugins/oeyoews/commandpalette/View":{"title":"$:/plugins/oeyoews/commandpalette/View","tags":"$:/tags/AboveStory","text":"<$commandpalettewidget/>\n"},"$:/plugins/oeyoews/commandpalette/Delete Tiddler":{"title":"$:/plugins/oeyoews/commandpalette/Delete Tiddler","command-palette-hint":"Choose tiddler to delete","command-palette-name":"Delete Tiddler","command-palette-type":"history","tags":"$:/tags/CommandPaletteCommand","text":"tm-delete-tiddler\n"},"$:/plugins/oeyoews/commandpalette/Permalink":{"title":"$:/plugins/oeyoews/commandpalette/Permalink","command-palette-hint":"Choose tiddler to permaling","command-palette-name":"Permalink","command-palette-type":"history","tags":"$:/tags/CommandPaletteCommand","text":"tm-permalink\n"},"$:/plugins/oeyoews/commandpalette/Version":{"title":"$:/plugins/oeyoews/commandpalette/Version","command-palette-caret":"49","command-palette-name":"Version","command-palette-type":"prompt-basic","tags":"$:/tags/CommandPaletteCommand","text":"[[$:/plugins/oeyoews/commandpalette]get[version]]"},"$:/plugins/oeyoews/commandpalette/Filter operation":{"title":"$:/plugins/oeyoews/commandpalette/Filter operation","command-palette-name":"Filter operation","command-palette-type":"prompt","tags":"$:/tags/CommandPaletteCommand","text":"[\n"},"$:/plugins/oeyoews/commandpalette/Fold All Tiddlers":{"title":"$:/plugins/oeyoews/commandpalette/Fold All Tiddlers","command-palette-name":"Fold All Tiddlers","command-palette-type":"message","tags":"$:/tags/CommandPaletteCommand","text":"tm-fold-all-tiddlers\n"},"$:/plugins/oeyoews/commandpalette/Home":{"title":"$:/plugins/oeyoews/commandpalette/Home","command-palette-name":"Home","command-palette-type":"message","tags":"$:/tags/CommandPaletteCommand","text":"tm-home\n"},"$:/plugins/oeyoews/commandpalette/New Journal Command":{"title":"$:/plugins/oeyoews/commandpalette/New Journal Command","command-palette-name":"New Journal","command-palette-type":"actionString","tags":"$:/tags/CommandPaletteCommand","text":"{{$:/core/ui/Actions/new-journal}}\n"},"$:/plugins/oeyoews/commandpalette/New Tiddler with title":{"title":"$:/plugins/oeyoews/commandpalette/New Tiddler with title","command-palette-name":"New Tiddler with title","command-palette-type":"prompt","tags":"$:/tags/CommandPaletteCommand","text":"+\n"},"$:/plugins/oeyoews/commandpalette/New Tiddler":{"title":"$:/plugins/oeyoews/commandpalette/New Tiddler","command-palette-name":"New Tiddler","command-palette-type":"message","tags":"$:/tags/CommandPaletteCommand","text":"tm-new-tiddler\n"},"$:/plugins/oeyoews/commandpalette/Permaview":{"title":"$:/plugins/oeyoews/commandpalette/Permaview","command-palette-name":"Permaview","command-palette-type":"message","tags":"$:/tags/CommandPaletteCommand","text":"tm-permaview\n"},"$:/plugins/oeyoews/commandpalette/Print":{"title":"$:/plugins/oeyoews/commandpalette/Print","command-palette-name":"Print","command-palette-type":"message","tags":"$:/tags/CommandPaletteCommand","text":"tm-print\n"},"$:/plugins/oeyoews/commandpalette/Recent Tiddlers Command":{"title":"$:/plugins/oeyoews/commandpalette/Recent Tiddlers Command","command-palette-caret":"33","command-palette-hint":"Recent","command-palette-name":"Recent Tiddlers","command-palette-type":"prompt-basic","tags":"$:/tags/CommandPaletteCommand","text":"[!is[system]!sort[created]search[]]\n"},"$:/plugins/oeyoews/commandpalette/Refresh Server":{"title":"$:/plugins/oeyoews/commandpalette/Refresh Server","command-palette-name":"Refresh Server","command-palette-type":"message","tags":"$:/tags/CommandPaletteCommand","text":"tm-server-refresh\n"},"$:/plugins/oeyoews/commandpalette/Save Tiddler":{"title":"$:/plugins/oeyoews/commandpalette/Save Tiddler","command-palette-hint":"Choose Draft to save","command-palette-mode":"drafts","command-palette-name":"Save Tiddler","command-palette-type":"history","tags":"$:/tags/CommandPaletteCommand","text":"tm-save-tiddler\n"},"$:/plugins/oeyoews/commandpalette/Search fields":{"title":"$:/plugins/oeyoews/commandpalette/Search fields","command-palette-caret":"16","command-palette-name":"Search fields","command-palette-type":"prompt-basic","tags":"$:/tags/CommandPaletteCommand","text":"[fields[]search[]]\n"},"$:/plugins/oeyoews/commandpalette/Search tiddlers with tag":{"title":"$:/plugins/oeyoews/commandpalette/Search tiddlers with tag","command-palette-name":"Search tiddlers with tag","command-palette-type":"prompt","tags":"$:/tags/CommandPaletteCommand","text":"@\n"},"$:/plugins/oeyoews/commandpalette/Search Tags":{"title":"$:/plugins/oeyoews/commandpalette/Search Tags","command-palette-name":"Search Tags","command-palette-type":"prompt","tags":"$:/tags/CommandPaletteCommand","text":"#\n"},"$:/plugins/oeyoews/commandpalette/Search":{"title":"$:/plugins/oeyoews/commandpalette/Search","command-palette-name":"Search","command-palette-type":"prompt","tags":"$:/tags/CommandPaletteCommand"},"$:/plugins/oeyoews/commandpalette/See all content-types":{"title":"$:/plugins/oeyoews/commandpalette/See all content-types","command-palette-caret":"48","command-palette-name":"See all content-type","command-palette-type":"prompt-basic","tags":"$:/tags/CommandPaletteCommand","text":"[all[tiddlers+shadows]each[type]get[type]search[]]\n"},"$:/plugins/oeyoews/commandpalette/See Drafts":{"title":"$:/plugins/oeyoews/commandpalette/See Drafts","command-palette-caret":"27","command-palette-name":"See Drafts","command-palette-type":"prompt-basic","tags":"$:/tags/CommandPaletteCommand","text":"[has:field[draft.of]search[]]\n"},"$:/plugins/oeyoews/commandpalette/See Languages":{"title":"$:/plugins/oeyoews/commandpalette/See Languages","command-palette-caret":"43","command-palette-name":"See Languages","command-palette-type":"prompt-basic","tags":"$:/tags/CommandPaletteCommand","text":"[!has[draft.of]plugin-type[language]search[]]\n"},"$:/plugins/oeyoews/commandpalette/See Missing Tiddlers":{"title":"$:/plugins/oeyoews/commandpalette/See Missing Tiddlers","command-palette-caret":"20","command-palette-name":"See Missing Tiddlers","command-palette-type":"prompt-basic","tags":"$:/tags/CommandPaletteCommand","text":"[all[missing]search[]]\n"},"$:/plugins/oeyoews/commandpalette/See Orphans Tiddlers":{"title":"$:/plugins/oeyoews/commandpalette/See Orphans Tiddlers","command-palette-caret":"20","command-palette-name":"See Orphans Tiddlers","command-palette-type":"prompt-basic","tags":"$:/tags/CommandPaletteCommand","text":"[all[orphans]search[]]\n"},"$:/plugins/oeyoews/commandpalette/See Plugins":{"title":"$:/plugins/oeyoews/commandpalette/See Plugins","command-palette-caret":"41","command-palette-name":"🧩 See Plugins","command-palette-type":"prompt-basic","tags":"$:/tags/CommandPaletteCommand","text":"[!has[draft.of]plugin-type[plugin]search[]]\n"},"$:/plugins/oeyoews/commandpalette/See Shadows Tiddlers":{"title":"$:/plugins/oeyoews/commandpalette/See Shadows Tiddlers","command-palette-caret":"20","command-palette-name":"See Shadows Tiddlers","command-palette-type":"prompt-basic","tags":"$:/tags/CommandPaletteCommand","text":"[all[shadows]search[]]\n"},"$:/plugins/oeyoews/commandpalette/ControlPanel Command":{"title":"$:/plugins/oeyoews/commandpalette/ControlPanel Command","command-palette-name":"Show Control Panel","command-palette-type":"actionString","tags":"$:/tags/CommandPaletteCommand","text":"<$action-navigate $to=\"$:/ControlPanel\"/>"},"$:/plugins/oeyoews/commandpalette/show tiddler commands":{"title":"$:/plugins/oeyoews/commandpalette/show tiddler commands","command-palette-name":"Show CommandTiddlers","command-palette-type":"prompt","tags":"$:/tags/CommandPaletteCommand","text":"@$:/tags/CommandPaletteCommand\n"},"$:/plugins/oeyoews/commandpalette/icon":{"title":"$:/plugins/oeyoews/commandpalette/icon","type":"image/svg+xml","text":"<svg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" viewBox=\"0 0 20 20\" aria-hidden=\"true\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M2 5a2 2 0 012-2h12a2 2 0 012 2v10a2 2 0 01-2 2H4a2 2 0 01-2-2V5zm3.293 1.293a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 01-1.414-1.414L7.586 10 5.293 7.707a1 1 0 010-1.414zM11 12a1 1 0 100 2h3a1 1 0 100-2h-3z\" clip-rule=\"evenodd\"></path></svg>\n"},"$:/plugins/oeyoews/commandpalette/CommandPaletteSearchSteps":{"text":"{\n  \"steps\": [\n    {\n      \"filter\": \"[!is[system]search:title[]]\",\n      \"hint\": \"in title\",\n      \"caret\": \"25\"\n    },\n    {\n      \"filter\": \"[all[system+shadows]search:title[]]\",\n      \"hint\": \"in title (system)\",\n      \"caret\": \"33\"\n    },\n    { \"filter\": \"[search[]]\", \"hint\": \"all\", \"caret\": \"8\" },\n    { \"filter\": \"[all[shadows]search[]]\", \"hint\": \"shadows\", \"caret\": \"20\" }\n  ]\n}\n","type":"application/json","title":"$:/plugins/oeyoews/commandpalette/CommandPaletteSearchSteps"},"$:/plugins/oeyoews/commandpalette/CommandPaletteSettings":{"text":"{\n  \"maxResults\": \"30\",\n  \"maxResultHintSize\": 45,\n  \"neverBasic\": \"false\",\n  \"smoothScroll\": \"false\"\n}\n","type":"application/json","title":"$:/plugins/oeyoews/commandpalette/CommandPaletteSettings"},"$:/plugins/oeyoews/commandpalette/CommandPaletteHistory":{"text":"{\n  \"history\": [\n    \"Explorer\",\n    \"Clone Tiddler\",\n    \"See Drafts\",\n    \"Refresh Server\",\n    \"Permaview\",\n    \"See Themes\",\n    \"Refresh Command Palette\",\n    \"See Shadows Tiddlers\",\n    \"See Orphans Tiddlers\",\n    \"Remove tag\",\n    \"Add tag to tiddler\",\n    \"Delete Tiddler\",\n    \"Close Tiddler\",\n    \"Recent Tiddlers\",\n    \"New Task with Title\",\n    \"Edit Tiddler\",\n    \"See Mising Tiddlers\",\n    \"Show CommandTiddlers\",\n    \"See untagged Tiddlers\",\n    \"See Languages\",\n    \"🧩 Plugins\",\n    \"New Command Wizard\",\n    \"Cancel Tiddler\",\n    \"Save Tiddler\",\n    \"Close other Tiddlers\",\n    \"Permalink\",\n    \"Create Command\",\n    \"Unfold All Tiddlers\",\n    \"Fold All Tiddlers\",\n    \"Print\",\n    \"Close All Tiddlers\",\n    \"Save Wiki\",\n    \"Home\",\n    \"Toggle Fullscreen\",\n    \"New Tiddler\"\n  ]\n}\n","type":"application/json","title":"$:/plugins/oeyoews/commandpalette/CommandPaletteHistory"},"$:/plugins/oeyoews/cmp/lib/focusAtCaretPosition.js":{"title":"$:/plugins/oeyoews/cmp/lib/focusAtCaretPosition.js","text":"/*\\\ntitle: $:/plugins/oeyoews/cmp/lib/focusAtCaretPosition.js\ntype: application/javascript\nmodule-type: library\n\n\\*/\nmodule.exports = function focusAtCaretPosition(el, caretPos) {\n  if (el !== null) {\n    el.value = el.value;\n    // ^ this is used to not only get \"focus\", but\n    // to make sure we don't have it everything -selected-\n    // (it causes an issue in chrome, and having it doesn't hurt any other browser)\n    if (el.createTextRange) {\n      var range = el.createTextRange();\n      range.move('character', caretPos);\n      range.select();\n      return true;\n    } else {\n      // (el.selectionStart === 0 added for Firefox bug)\n      if (el.selectionStart || el.selectionStart === 0) {\n        el.focus();\n        el.setSelectionRange(caretPos, caretPos);\n        return true;\n      } else {\n        // fail city, fortunately this never happens (as far as I've tested) :)\n        el.focus();\n        return false;\n      }\n    }\n  }\n};\n","type":"application/javascript","module-type":"library"},"$:/plugins/oeyoews/cmp/lib/getActiveElement.js":{"title":"$:/plugins/oeyoews/cmp/lib/getActiveElement.js","text":"/*\\\ntitle: $:/plugins/oeyoews/cmp/lib/getActiveElement.js\ntype: application/javascript\nmodule-type: library\n\n\\*/\nmodule.exports = function getActiveElement(element = document.activeElement) {\n  const shadowRoot = element.shadowRoot;\n  const contentDocument = element.contentDocument;\n\n  if (shadowRoot && shadowRoot.activeElement) {\n    return this.getActiveElement(shadowRoot.activeElement);\n  }\n\n  if (contentDocument && contentDocument.activeElement) {\n    return this.getActiveElement(contentDocument.activeElement);\n  }\n\n  return element;\n};\n","type":"application/javascript","module-type":"library"},"$:/plugins/oeyoews/cmp/lib/getCurrentSelection.js":{"title":"$:/plugins/oeyoews/cmp/lib/getCurrentSelection.js","text":"/*\\\ntitle: $:/plugins/oeyoews/cmp/lib/getCurrentSelection.js\ntype: application/javascript\nmodule-type: library\n\n\\*/\nmodule.exports = function getCurrentSelection() {\n  const getActiveElement = require('./getActiveElement');\n  let selection = window.getSelection().toString();\n  if (selection !== '') return selection;\n  let activeElement = getActiveElement();\n  if (activeElement === undefined || activeElement.selectionStart === undefined)\n    return '';\n  if (activeElement.selectionStart > activeElement.selectionEnd) {\n    return activeElement.value.substring(\n      activeElement.selectionStart,\n      activeElement.selectionEnd\n    );\n  } else {\n    return activeElement.value.substring(\n      activeElement.selectionEnd,\n      activeElement.selectionStart\n    );\n  }\n};\n","type":"application/javascript","module-type":"library"},"$:/plugins/oeyoews/cmp/lib/getTiddlersWithTag.js":{"title":"$:/plugins/oeyoews/cmp/lib/getTiddlersWithTag.js","text":"/*\\\ntitle: $:/plugins/oeyoews/cmp/lib/getTiddlersWithTag.js\ntype: application/javascript\nmodule-type: library\n\n\\*/\n\n//helper function to retrieve all tiddlers (+ their fields) with a tag\nmodule.exports = function getTiddlersWithTag(tag) {\n  let tiddlers = $tw.wiki.getTiddlersWithTag(tag);\n  return tiddlers.map((t) => $tw.wiki.getTiddler(t));\n};\n","type":"application/javascript","module-type":"library"},"$:/config/ShortcutInfo/open-command-palette":{"title":"$:/config/ShortcutInfo/open-command-palette","text":"Open the command palette"},"$:/config/ShortcutInfo/open-command-palette-command-mode":{"title":"$:/config/ShortcutInfo/open-command-palette-command-mode","text":"Open the command palette in command mode"},"$:/config/ShortcutInfo/insert-command-palette-result":{"title":"$:/config/ShortcutInfo/insert-command-palette-result","text":"Insert the current result in the previously focused element"},"$:/config/ShortcutInfo/open-command-palette-selection":{"title":"$:/config/ShortcutInfo/open-command-palette-selection","text":"Open the command palette with current selection"},"$:/config/shortcuts/open-command-palette":{"title":"$:/config/shortcuts/open-command-palette","text":"ctrl-P"},"$:/config/shortcuts/open-command-palette-command-mode":{"title":"$:/config/shortcuts/open-command-palette-command-mode","text":"ctrl-shift-P"},"$:/config/shortcuts/insert-command-palette-result":{"title":"$:/config/shortcuts/insert-command-palette-result","text":"ctrl+shift+I"},"$:/config/shortcuts/open-command-palette-selection":{"title":"$:/config/shortcuts/open-command-palette-selection","text":""},"$:/plugins/oeyoews/commandpalette/Compact.css":{"title":"$:/plugins/oeyoews/commandpalette/Compact.css","tags":"$:/tags/CommandPaletteTheme $:/tags/Stylesheet","type":"text/vnd.tiddlywiki","text":"\\rules only filteredtranscludeinline transcludeinline macrodef macrocallinline html\n\n:root {\n    --palette-radius: 5px;\n}\n.commandpalette {\n    position: fixed;\n    background: <<colour background>>;\n    z-index: 9999999;\n    left: 50%;\n    top: 10%;\n    transform: translate(-50%, 0%);\n    width: 500px;\n    display: none;\n    flex-direction: column;\n    font-size: 21px;\n    border-radius: var(--palette-radius);\n    box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 14px;\n    border: 2px solid <<colour page-background>>;\n}\n.inputhintwrapper {\n    display: flex;\n    align-items: center;\n    <!-- border-bottom: 2px solid <<colour page-background>>; -->\n}\n.commandpalette input {\n    border: 0;\n    background: 0;\n    height: 40px;\n    color: <<colour foreground>>;\n    border-radius: var(--palette-radius) var(--palette-radius) 0px 0px;\n    outline: 0;\n    min-width: 50px;\n    flex: 1;\n    padding-left: 7px;\n}\n.commandpalettehint {\n    color:  <<colour foreground>>;\n    font-size: 13px;\n    text-align: right;\n    flex-shrink: 0;\n    padding-right: 7px;\n    opacity: 0.6;\n}\n.commandpaletteresultselected>.commandpalettehint {\n    color: <<colour background>>;\n    opacity: 1;\n}\n.commandpalettehintmain {\n\n}\n.commandpaletteresult {\n    background: <<colour background>>;\n    font-size: 15px;\n    color: <<colour foreground>>;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding-left: 6px;\n    padding-top: 4px;\n    padding-bottom: 4px;\n    cursor: pointer;\n}\n.commandpaletteresult:not(:last-child) {\n    <!-- border-bottom: <<colour page-background>> solid 1px; -->\n    margin: 4px 0;\n    font-size: 18px;\n}\n.commandpaletteresult:hover:not(.commandpaletteresultselected) {\n    background: <<colour page-background>>;\n}\n.commandpaletteresultselected {\n    background: <<colour primary>>;\n    color: <<colour page-background>>;\n}\n.cp-scroll{\n    max-height: 50vh;\n    overflow-y: auto;\n    position: relative;\n    border-radius: 0px 0px var(--palette-radius) var(--palette-radius);\n}"},"$:/plugins/oeyoews/commandpalette/Original.css":{"title":"$:/plugins/oeyoews/commandpalette/Original.css","tags":"$:/tags/CommandPaletteTheme","type":"text/vnd.tiddlywiki","text":"\\rules only filteredtranscludeinline transcludeinline macrodef macrocallinline html\n:root {\n    --palette-radius: 5px;\n}\n.commandpalette {\n    position: fixed;\n    background:<<colour page-background>>;\n    z-index: 9999999;\n    left: 50%;\n    top: 10%;\n    transform: translate(-50%, 0%);\n    width: 500px;\n    display: none;\n    flex-direction: column;\n    font-size: 21px;\n    border-radius: var(--palette-radius);\n    box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 14px;\n    border: 4px solid rgba(0, 0, 0, 0);\n}\n.commandpalette input {\n    border: 0;\n    height: 40px;\n    color: <<colour foreground>>;\n    border-radius: var(--palette-radius) var(--palette-radius) 0px 0px;\n    padding-left: 11px;\n    padding-right: 11px;\n    width: 100%;\n    outline: 0;\n}\n.commandpalettehint {\n    color:  <<colour foreground>>;\n    font-size: 13px;\n    text-align: right;\n    flex-shrink: 0;\n    padding-right: 7px;\n    opacity: 0.6;\n}\n.commandpaletteresultselected>.commandpalettehint {\n    color: <<colour background>>;\n    opacity: 1;\n}\n.commandpalettehintmain {\n}\n.commandpaletteresult {\n    background: <<colour background>>;\n    font-size: 15px;\n    color: <<colour foreground>>;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding-left: 6px;\n    padding-top: 4px;\n    padding-bottom: 4px;\n    cursor: pointer;\n}\n.commandpaletteresult:not(:last-child) {\n    <!-- border-bottom: <<colour page-background>> solid 1px; -->\n}\n.commandpaletteresult:hover:not(.commandpaletteresultselected) {\n    background: <<colour page-background>>;\n}\n.commandpaletteresultselected {\n    background: <<colour primary>>;\n    color: <<colour page-background>>;\n}\n.cp-scroll{\n    max-height: 50vh;\n    overflow-y: auto;\n    position: relative;\n    border-radius: 0px 0px var(--palette-radius) var(--palette-radius);\n}"}}}